{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/TmapEdgeTypeSubscriber.js"],"names":["TmapEdgeTypeSubscriber","allEdgeTypes","options","priority","tObj","toWL","typeWL","connections","parseFieldData","tById","tracker","getTiddlersByIds","fromId","fields","edges","makeHashMap","conId","con","toTRef","to","type","edge","id","genUUID","writeFieldData","$tm","config","sys","jsonIndentation","edgeType"],"mappings":";;;;;;;;;;;AAaA;;;;AACA;;;;AACA;;;;;;;;;;+eAfA;AACA;;;;;;;;;;AAUA;;AAMA;;AAEA;;;;;;IAMMA,sB;;;AAEJ,kCAAYC,YAAZ,EAAwC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA,2IAChCD,YADgC,aAChBE,UAAU,CADM,IACAD,OADA;AAEvC;;AAED;;;;;;;8BAGUE,I,EAAMC,I,EAAMC,M,EAAQ;;AAE5B,UAAMC,cAAc,gBAAMC,cAAN,CAAqBJ,IAArB,EAA2B,YAA3B,CAApB;AACA,UAAI,CAACG,WAAL,EAAkB;AAChB;AACD;;AAED,UAAME,QAAQ,KAAKC,OAAL,CAAaC,gBAAb,EAAd;AACA,UAAMC,SAASR,KAAKS,MAAL,CAAY,SAAZ,CAAf;;AAEA,UAAMC,QAAQ,gBAAMC,WAAN,EAAd;;AAEA,WAAK,IAAIC,KAAT,IAAkBT,WAAlB,EAA+B;;AAE7B,YAAMU,MAAMV,YAAYS,KAAZ,CAAZ;AACA,YAAME,SAAST,MAAMQ,IAAIE,EAAV,CAAf;AACA,YAAID,WAAW,CAACb,IAAD,IAASA,KAAKa,MAAL,CAApB,MAAsC,CAACZ,MAAD,IAAWA,OAAOW,IAAIG,IAAX,CAAjD,CAAJ,EAAwE;;AAEtEN,gBAAME,KAAN,IAAe,mBAASJ,MAAT,EAAiBK,IAAIE,EAArB,EAAyBF,IAAIG,IAA7B,EAAmCJ,KAAnC,CAAf;AACD;AACF;;AAED,aAAOF,KAAP;AAED;;AAED;;;;;;+BAGWV,I,EAAMiB,I,EAAMD,I,EAAM;;AAE3B;AACA,UAAIb,cAAc,gBAAMC,cAAN,CAAqBJ,IAArB,EAA2B,YAA3B,EAAyC,EAAzC,CAAlB;;AAEA;AACAiB,WAAKC,EAAL,GAAUD,KAAKC,EAAL,IAAW,gBAAMC,OAAN,EAArB;AACA;AACAhB,kBAAYc,KAAKC,EAAjB,IAAuB,EAACH,IAAIE,KAAKF,EAAV,EAAcC,MAAMA,KAAKE,EAAzB,EAAvB;;AAEA;AACA,sBAAME,cAAN,CAAqBpB,IAArB,EAA2B,YAA3B,EAAyCG,WAAzC,EAAsDkB,IAAIC,MAAJ,CAAWC,GAAX,CAAeC,eAArE;;AAEA,aAAOP,IAAP;AAED;;AAED;;;;;;+BAGYjB,I,EAAMiB,I,EAAMD,I,EAAM;;AAE5B,UAAI,CAACC,KAAKC,EAAV,EAAc;;AAEd;AACA,UAAIf,cAAc,gBAAMC,cAAN,CAAqBJ,IAArB,EAA2B,YAA3B,EAAyC,EAAzC,CAAlB;;AAEA;AACA,aAAOG,YAAYc,KAAKC,EAAjB,CAAP;;AAEA;AACA,sBAAME,cAAN,CAAqBpB,IAArB,EAA2B,YAA3B,EAAyCG,WAAzC,EAAsDkB,IAAIC,MAAJ,CAAWC,GAAX,CAAeC,eAArE;;AAEA,aAAOP,IAAP;AAED;;AAED;;;;;;8BAGUQ,Q,EAAU;;AAElB,aAAO,IAAP;AAED;;;;;;AAGH;;QAES7B,sB,GAAAA,sB","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/TmapEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/modules/edge-type-handler/tmap\ntype: application/javascript\nmodule-type: tmap.edgetypehandler\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport AbstractEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * TiddlyMap's original EdgeTypeSubscriber. It will store and retrieve edges by relying on\n * json stored in a tiddler field.\n *\n * @constructor\n */\nclass TmapEdgeTypeSubscriber extends AbstractEdgeTypeSubscriber {\n\n  constructor(allEdgeTypes, options = {}) {\n    super(allEdgeTypes, { priority: 0, ...options });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  loadEdges(tObj, toWL, typeWL) {\n\n    const connections = utils.parseFieldData(tObj, 'tmap.edges');\n    if (!connections) {\n      return;\n    }\n\n    const tById = this.tracker.getTiddlersByIds();\n    const fromId = tObj.fields['tmap.id'];\n\n    const edges = utils.makeHashMap();\n\n    for (let conId in connections) {\n\n      const con = connections[conId];\n      const toTRef = tById[con.to];\n      if (toTRef && (!toWL || toWL[toTRef]) && (!typeWL || typeWL[con.type])) {\n\n        edges[conId] = new Edge(fromId, con.to, con.type, conId);\n      }\n    }\n\n    return edges;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  insertEdge(tObj, edge, type) {\n\n    // load existing connections\n    var connections = utils.parseFieldData(tObj, 'tmap.edges', {});\n\n    // assign new id if not present yet\n    edge.id = edge.id || utils.genUUID();\n    // add to connections object\n    connections[edge.id] = {to: edge.to, type: type.id};\n\n    // save\n    utils.writeFieldData(tObj, 'tmap.edges', connections, $tm.config.sys.jsonIndentation);\n\n    return edge;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  deleteEdge (tObj, edge, type) {\n\n    if (!edge.id) return;\n\n    // load\n    var connections = utils.parseFieldData(tObj, 'tmap.edges', {});\n\n    // delete\n    delete connections[edge.id];\n\n    // save\n    utils.writeFieldData(tObj, 'tmap.edges', connections, $tm.config.sys.jsonIndentation);\n\n    return edge;\n\n  }\n\n  /**\n   * @inheritDoc\n   */\n  canHandle(edgeType) {\n\n    return true;\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport { TmapEdgeTypeSubscriber };\n"],"sourceRoot":"../../../../../../src/plugins"}