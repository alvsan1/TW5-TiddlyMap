{"version":3,"sources":["felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractRefEdgeTypeSubscriber.js"],"names":["AbstractRefEdgeTypeSubscriber","tObj","toWL","typeWL","refsByType","getReferences","hasElements","fromId","fields","idByT","$tm","tracker","getIdsByTiddlers","allETy","allEdgeTypes","fromTRef","getTiddlerRef","edges","makeHashMap","typeId","toRefs","type","i","length","toTRef","$tw","wiki","tiddlerExists","isSystemOrDraft","id","utils","hashString"],"mappings":";;;;;;;;AAaA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;+eAhBA;AACA;;;;;;;;;;AAUA;;AAOA;;AAEA;;;;;IAKMA,6B;;;;;;;;;;;;;AAEJ;;;8BAGUC,I,EAAMC,I,EAAMC,M,EAAQ;;AAE5B;AACA,UAAMC,aAAa,KAAKC,aAAL,CAAmBJ,IAAnB,EAAyBC,IAAzB,EAA+BC,MAA/B,CAAnB;;AAEA,UAAI,CAACC,UAAD,IAAe,CAAC,gBAAME,WAAN,CAAkBF,UAAlB,CAApB,EAAmD;;AAEnD,UAAMG,SAASN,KAAKO,MAAL,CAAY,SAAZ,CAAf;AACA,UAAMC,QAAQC,IAAIC,OAAJ,CAAYC,gBAAZ,EAAd;AACA,UAAMC,SAAS,KAAKC,YAApB;AACA,UAAMC,WAAW,gBAAMC,aAAN,CAAoBf,IAApB,CAAjB;;AAEA,UAAMgB,QAAQ,gBAAMC,WAAN,EAAd;;AAEA,WAAK,IAAIC,MAAT,IAAmBf,UAAnB,EAA+B;;AAE7B,YAAMgB,SAAShB,WAAWe,MAAX,CAAf;;AAEA,YAAI,CAACC,MAAL,EAAa;AACX;AACD;;AAED,YAAMC,OAAOR,OAAOM,MAAP,CAAb;AACA,aAAK,IAAIG,IAAIF,OAAOG,MAApB,EAA4BD,GAA5B,GAAkC;AAChC,cAAME,SAASJ,OAAOE,CAAP,CAAf;;AAEA,cAAI,CAACE,MAAD,IACC,CAACC,IAAIC,IAAJ,CAASC,aAAT,CAAuBH,MAAvB,CADF,IAEC,gBAAMI,eAAN,CAAsBJ,MAAtB,CAFD,IAGEtB,QAAQ,CAACA,KAAKsB,MAAL,CAHf,EAG8B;AAC5B;AACD;;AAED,cAAMK,KAAKR,KAAKQ,EAAL,GAAUJ,IAAIK,KAAJ,CAAUC,UAAV,CAAqBhB,WAAWS,MAAhC,CAArB;AACAP,gBAAMY,EAAN,IAAY,mBAAStB,MAAT,EAAiBE,MAAMe,MAAN,CAAjB,EAAgCH,KAAKQ,EAArC,EAAyCA,EAAzC,CAAZ;AACD;AACF;;AAED,aAAOZ,KAAP;AAED;;AAED;;;;;;;;;;;;;;;kCAYchB,I,EAAMC,I,EAAMC,M,EAAQ;;AAEhC,YAAM,oCAAyB,IAAzB,EAA+B,eAA/B,CAAN;AAED;;;;;;AAGH;;kBAEeH,6B","file":"../../../../../felixhayashi/tiddlymap/js/edgeTypeSubscriber/AbstractRefEdgeTypeSubscriber.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/AbstractRefEdgeTypeSubscriber\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport { MissingOverrideError } from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport AbstractEdgeTypeSubscriber from '$:/plugins/felixhayashi/tiddlymap/js/AbstractEdgeTypeSubscriber';\n\n/*** Code **********************************************************/\n\n/**\n * Parent class for all subscribers that retrieve or store\n * non-TiddlyMap edges ({@see TmapEdgeTypeSubscriber) from a tiddler,\n * for example tag or list references.\n */\nclass AbstractRefEdgeTypeSubscriber extends AbstractEdgeTypeSubscriber {\n\n  /**\n   * @inheritDoc\n   */\n  loadEdges(tObj, toWL, typeWL) {\n\n    // references to other tiddlers grouped by their edge type\n    const refsByType = this.getReferences(tObj, toWL, typeWL);\n\n    if (!refsByType || !utils.hasElements(refsByType)) return;\n\n    const fromId = tObj.fields['tmap.id'];\n    const idByT = $tm.tracker.getIdsByTiddlers();\n    const allETy = this.allEdgeTypes;\n    const fromTRef = utils.getTiddlerRef(tObj);\n\n    const edges = utils.makeHashMap();\n\n    for (let typeId in refsByType) {\n\n      const toRefs = refsByType[typeId];\n\n      if (!toRefs) {\n        continue;\n      }\n\n      const type = allETy[typeId];\n      for (let i = toRefs.length; i--;) {\n        const toTRef = toRefs[i];\n\n        if (!toTRef\n          || !$tw.wiki.tiddlerExists(toTRef)\n          || utils.isSystemOrDraft(toTRef)\n          || (toWL && !toWL[toTRef])) {\n          continue;\n        }\n\n        const id = type.id + $tw.utils.hashString(fromTRef + toTRef);\n        edges[id] = new Edge(fromId, idByT[toTRef], type.id, id);\n      }\n    }\n\n    return edges;\n\n  }\n\n  /**\n   * Returns a list of tiddlers (= tiddler names) that are targeted by the specified tiddler.\n   * Note: All referenced tiddlers have to be grouped by their edge type.\n   *\n   * @interface\n   * @param {Tiddler} tObj - the tiddler that holds the references.\n   * @param {Object<TiddlerReference, boolean>} toWL - a whitelist of tiddlers that are allowed to\n   *     be included in the result.\n   * @param {Object<id, EdgeType>} typeWL - a whitelist that defines that only Tiddlers that are linked\n   *     via a type specified in the list may be included in the result.\n   * @return {Object<string, TiddlerReference[]>|null} a list of referenced tiddlers grouped by their edge type.\n   */\n  getReferences(tObj, toWL, typeWL) {\n\n    throw new MissingOverrideError(this, 'getReferences');\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport default AbstractRefEdgeTypeSubscriber;\n"],"sourceRoot":"../../../../../../src/plugins"}