{"version":3,"sources":["felixhayashi/tiddlymap/js/graph/ViewAbstraction.js"],"names":["env","ViewAbstraction","view","options","_registerPaths","isCreate","configTRef","name","getRandomLabel","plural","$tw","wiki","generateNewTitle","$tm","path","views","_createView","exists","getRoot","ResourceNotFoundException","_rebuildCache","isShadowTiddler","updates","changedTiddlers","edgeTypes","hasKeyWithPrefix","tiddler","cp","getTiddler","snapshotTRef","asString","date","fields","Date","utils","formatDateString","getBasename","deleteTiddlers","getMatches","filter","getLabel","newLabel","inArray","notify","oldLabel","newRoot","oldRoot","mv","config","sys","defaultView","setEntry","ref","sysUserConf","liveTab","fallbackView","each","tObj","tRef","setField","nodes","getNodeData","id","saveNodeData","isTrue","getConfig","isRebuild","getPropertiesByPrefix","prefixlessName","startsWith","args","length","prop","setConfig","getWithoutPrefix","val","undefined","logger","match","addTiddler","Tiddler","misc","liveViewLabel","node","regex","escapeRegExp","_getNodeIdFilterPart","getNodeFilter","expr","force","replace","isLiveView","nodeFilterTRef","nodeFilter","getEdgeTypeFilter","edgeTypeFilterTRef","edgeTypeFilter","_isNodeIncludedById","part","separator","setNodeFilter","saveNodePosition","nodeId","f","nodeData","type","allETy","indeces","src","Object","keys","raw","pretty","getPrettyFilter","matches","getEdgeTypeMatches","whitelist","getLookupTable","isEdgeTypeMatch","getInstance","makeHashMap","compiled","compileFilter","data","parseFieldData","mapTRef","assign","writeFieldData","jsonIndentation","x","y","positions","style","pos","p","_getRootPath","isForce","protoView","isHidden","destroy","title","genUUID","field","viewMarker","setEdgeTypeFilter","defaultEdgeTypeFilter","label","hasSubString","tiddlerExists"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/graph/ViewAbstraction.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport EdgeType from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport utils    from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport * as env from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\nimport {\n  InvalidArgumentException,\n}               from '$:/plugins/felixhayashi/tiddlymap/js/exception';\n\n/*** Code **********************************************************/\n\n/**\n * This class abstracts the various pieces that together make up the\n * view such as map, edge filter, node filter, config etc.\n * If {@code isCreate} is not specified, the viewAbstraction will only\n * represent the view and not create it or any missing part of it.\n */\nclass ViewAbstraction {\n\n  /**\n   *\n   * @param {string|ViewAbstraction|Tiddler} view - The view\n   * @param {Object} options\n   * @param {boolean} [options.isCreate] - True if the view should be created and override\n   *     any existing view, false otherwise.\n   */\n  constructor(view, options = {}) {\n\n    if (view instanceof ViewAbstraction) {\n\n      // bounce back the object we received\n      return view;\n\n    }\n\n    this._registerPaths(view);\n\n    if (options.isCreate) {\n\n      if (!this.configTRef) {\n\n        const name = utils.getRandomLabel({plural: true});\n        this.configTRef = $tw.wiki.generateNewTitle(`${$tm.path.views}/${name}`);\n\n      }\n\n      this._createView(options);\n\n    } else if (!ViewAbstraction.exists(this.getRoot())) { // no valid config path\n\n      throw new ResourceNotFoundException('ViewAbstraction', view);\n\n    }\n\n    // force complete rebuild\n    this._rebuildCache();\n\n  }\n\n  /**\n   * Returns true if this view cannot be edited.\n   * As a general rule, all views that come as plugins are locked.\n   *\n   * @return {boolean}\n   */\n  isLocked() {\n\n    return $tw.wiki.isShadowTiddler(this.configTRef);\n\n  }\n\n  /**\n   * Gives the view a chance to rebuild its properties cache.\n   *\n   * @param {Updates} updates\n   * @return {boolean} True if changes affect parts of the view.\n   */\n  update(updates) {\n\n    const { changedTiddlers } = updates;\n\n    if (updates[env.path.edgeTypes] || utils.hasKeyWithPrefix(changedTiddlers, this.getRoot())) {\n\n      this._rebuildCache();\n\n      return true;\n    }\n\n    return false;\n\n  }\n\n  /**\n   * clones the tiddler denoted via tRef and uses it as placeholder\n   * for this view when a widget using this view is displayed in\n   * static mode\n   *\n   * @param {Tiddler} tiddler\n   */\n  addPlaceholder(tiddler) {\n\n    utils.cp(utils.getTiddler(tiddler), this.snapshotTRef, true);\n\n  }\n\n  /**\n   * A view exists if the the view's root exists as tiddler in the store.\n   *\n   * @deprecated\n   *\n   * @return {boolean}\n   */\n  exists() {\n\n    return ViewAbstraction.exists(this);\n\n  }\n\n  /**\n   * The path to the config tiddler that represents the view.\n   *\n   * @return {TiddlerReference}\n   */\n  getRoot() {\n\n    return this.configTRef;\n\n  }\n\n  /**\n   * Returns this view's creation date.\n   *\n   * @param {boolean} [asString] True if the returned value should be a string in any case.\n   * @return {string|object|undefined} The creation date in the specified output format.\n   */\n  getCreationDate(asString) {\n\n    const date = $tw.wiki.getTiddler(this.configTRef).fields['created'];\n\n    if (asString) {\n      // note: th will be translated as well!\n      return (date instanceof Date ? $tw.utils.formatDateString(date, 'DDth MMM YYYY') : '');\n    }\n\n    return date;\n\n  }\n\n  /**\n   * The label of the view (which is basically the root-path's basename).\n   *\n   * @return {string} The label (name) of the view.\n   */\n  getLabel() {\n\n    return utils.getBasename(this.configTRef);\n\n  }\n\n  /**\n   * Method to remove the view and its configuration.\n   * It will make the view non-existent.\n   *\n   * Note: Do not use the object anymore after you called this function!\n   */\n  destroy() {\n\n    // delete the view and all tiddlers stored in its path (map, edge-filter etc.)\n    utils.deleteTiddlers(utils.getMatches(`[prefix[${this.configTRef}]]`));\n\n  }\n\n  /**\n   * Returns all tiddlers include tiddlymap widgets that reference this view.\n   */\n  getOccurrences() {\n\n    const filter = `[regexp:text[<\\\\$(tiddlymap|tmap).*?view=.${this.getLabel()}..*?>]]`;\n    return utils.getMatches(filter);\n\n  }\n\n  /**\n   * Renames the view.\n   *\n   * @param {string} newLabel\n   * @return {boolean}\n   */\n  rename(newLabel) {\n\n    if (typeof newLabel !== 'string') {\n\n      return false;\n    }\n\n    if (utils.inArray('/', newLabel)) {\n\n      $tm.notify('A view name must not contain any \"/\"');\n\n      return false;\n    }\n\n    // keep a reference to the old label before we change it\n    const oldLabel = this.getLabel();\n\n    // start the renaming\n    const newRoot = env.path.views + '/' + newLabel;\n    const oldRoot = this.getRoot();\n\n    utils.mv(oldRoot, newRoot, true);\n\n    // update references\n\n    if ($tm.config.sys.defaultView === oldLabel) {\n      utils.setEntry($tm.ref.sysUserConf, 'defaultView', newLabel);\n    }\n\n    if ($tm.config.sys.liveTab.fallbackView === oldLabel) {\n      utils.setEntry($tm.ref.sysUserConf, 'liveTab.fallbackView', newLabel);\n    }\n\n    $tw.wiki.each((tObj, tRef) => {\n\n      if (tObj.fields['tmap.open-view'] === oldLabel) {\n\n        // update global node data fields referencing this view\n        utils.setField(tRef, 'tmap.open-view', newLabel);\n\n        return;\n\n      }\n\n      if (ViewAbstraction.exists(tRef)) {\n\n        // update all local node data referencing this view\n        const view = new ViewAbstraction(tRef);\n        const nodes = view.getNodeData();\n\n        for (let id in nodes) {\n          if (nodes[id]['open-view'] === oldLabel) {\n            nodes[id]['open-view'] = newLabel;\n          }\n        }\n\n        view.saveNodeData(nodes);\n\n      }\n\n    });\n\n    this._registerPaths(newLabel);\n    this._rebuildCache();\n\n  }\n\n  /**\n   * All configurations that are toggled via checkboxes to have a value\n   * either `true` or `false` can be accessed via this method.\n   *\n   * @param {string} name - The configs name without the `_config` prefix.\n   * @return {boolean} True if the configuration is enabled, false otherwise.\n   */\n  isEnabled(name) {\n\n    return utils.isTrue(this.getConfig(name), false);\n\n  }\n\n  /**\n   * Returns a configuration value relating to the given name. If no name\n   * is given, an object with all configurations is returned.\n   *\n   * @param {string} [name] - Instead of all configurations being returned,\n   *     only the configuration named name is returned. The initial \"config.\"\n   *     may be omitted.\n   * @param {boolean} [isRebuild] - True if to rebuild the cache, false otherwise.\n   * @result {string|Object} If `type` is not specified an object containing\n   *     all configurations is returned, otherwise a single value will be returned.\n   */\n  getConfig(name, isRebuild) {\n\n    let config;\n\n    if (!isRebuild && this.config) {\n\n      config = this.config;\n\n    } else {\n\n      const fields = utils.getTiddler(this.configTRef).fields;\n      config = utils.getPropertiesByPrefix(fields, 'config.');\n\n    }\n\n    const prefixlessName = name && utils.startsWith(name, 'config.') ? name : `config.${name}`;\n\n    return (name ? config[prefixlessName] : config);\n\n  }\n\n  /**\n   * Enables the api user to modify the view's configuration.\n   *\n   * In case two arguments are provided, the first is assumed to be the property\n   * name and the second the value to be set.\n   *\n   * In case a single object is provided as argument, it is treated as a key-value\n   * collection and each property in this object is saved as config.\n   *\n   * @param {*} args\n   */\n  setConfig(...args) {\n\n    if (args[0] == null) { // null or undefined\n\n      return;\n    }\n\n    if (args.length === 1 && typeof args[0] === 'object') {\n\n      for (let prop in args[0]) {\n        this.setConfig(prop, args[0][prop]);\n      }\n\n    } else if (args.length === 2 && typeof args[0] === 'string') {\n\n      const prop = utils.getWithoutPrefix(args[0], 'config.');\n      let val = args[1];\n\n      if (val === undefined) {\n\n        return;\n      }\n\n      if (val === null) {\n\n        $tm.logger('debug', 'Removing config', prop);\n        delete this.config[`config.${prop}`];\n\n      } else {\n\n        if (prop === 'edge_type_namespace') {\n          const match = val.match(/[^:]+/);\n          val = (match ? match[0] : '');\n        }\n\n      }\n\n      $tm.logger('log', 'Setting config', prop, val);\n      this.config[`config.${prop}`] = val;\n\n\n    } else { // not allowed\n\n      throw new InvalidArgumentException(...args);\n\n    }\n\n    // save\n    $tw.wiki.addTiddler(new $tw.Tiddler(\n      utils.getTiddler(this.configTRef),\n      this.config\n    ));\n\n  }\n\n  /**\n   * Whether this view represents the 'live view'\n   *\n   * @return {boolean}\n   */\n  isLiveView() {\n\n    return (this.getLabel() === $tm.misc.liveViewLabel);\n\n  }\n\n  /**\n   * Whether the node is already explicitly contained in the view's node filter,\n   * i.e. whether it is explicitly referenced by its title.\n   *\n   * @private\n   *\n   * @param {Node} node\n   * @return {string}\n   */\n  _isNodeIncludedById(node) {\n\n    const regex = $tw.utils.escapeRegExp(ViewAbstraction._getNodeIdFilterPart(node));\n\n    return this.getNodeFilter('raw').match(regex);\n\n  }\n\n  /**\n   * Sets and rebuilds the node filter according to the expression provided.\n   *\n   * @param {string} expr - A tiddlywiki filter expression.\n   * @param {boolean} force\n   */\n  setNodeFilter(expr, force) {\n\n    expr = expr.replace(/[\\n\\r]/g, ' ');\n\n    if (this.getNodeFilter('raw') === expr) {\n      // already up to date;\n      // This check is critical to prevent recursion!\n      return;\n    }\n\n    if (this.isLiveView() && !force) {\n\n      $tm.notify('You must not change the live view\\'s node filter!');\n\n      return;\n    }\n\n    utils.setField(this.nodeFilterTRef, 'filter', expr);\n\n    $tm.logger('debug', 'Node filter set to', expr);\n\n    // this register new filter\n    this.nodeFilter = this.getNodeFilter(null, true);\n\n  }\n\n  /**\n   * Sets and rebuilds the edge type filter according to the expression provided.\n   *\n   * @param {string} expr - A tiddlywiki filter expression.\n   */\n  setEdgeTypeFilter(expr) {\n\n    expr = expr.replace(/[\\n\\r]/g, ' ');\n\n    if (this.getEdgeTypeFilter('raw') === expr) { // already up to date\n      // This check is critical to prevent recursion!\n      return;\n    }\n\n    utils.setField(this.edgeTypeFilterTRef, 'filter', expr);\n\n    $tm.logger('debug', 'Edge filter set to', expr);\n\n    // this register new filter\n    this.edgeTypeFilter = this.getEdgeTypeFilter(null, true);\n\n  }\n\n  /**\n   * Method to append a filter part to the current filter (*or*-style).\n   * The node's tmap.id will be used in the filter to reference the corresponding tiddler.\n   *\n   * @param {Node} node\n   */\n  addNode(node) {\n\n    if (!this._isNodeIncludedById(node)) {\n\n      const part = ViewAbstraction._getNodeIdFilterPart(node);\n      const separator = ' ';\n      this.setNodeFilter(this.getNodeFilter('raw') + separator + part);\n\n      this.saveNodePosition(node);\n    }\n\n  }\n\n  /**\n   * Removes a node from the the view filter that has been\n   * explicitly added before.\n   *\n   * ATTENTION: Never remove the node data (i.e. style and positions)\n   * from the node-data store. This will be done by a garbage\n   * collector. See Adapter.prototype._removeObsoleteViewData\n   *\n   * @return {boolean} True if node was removed, false otherwise.\n   *     Note: false is also returned if the node did not exist before.\n   */\n  removeNode(nodeId) {\n\n    if (!this._isNodeIncludedById(nodeId)) {\n\n      return false;\n    }\n\n    const part = ViewAbstraction._getNodeIdFilterPart(nodeId);\n    const f = this.getNodeFilter('raw').replace(part, '');\n\n    this.setNodeFilter(f);\n\n    if (this.nodeData[nodeId]) {\n      this.saveNodeData(nodeId, null);\n    }\n\n    return true;\n\n  }\n\n  /**\n   * Method will return a tiddlywiki edge-type filter that is used to\n   * decide which edge types are displayed by the graph.\n   *\n   * Note: needs to be recalculated if the collection of edge types changed\n   * in the wiki.\n   *\n   * @param {(\"raw\"|\"pretty\"|\"matches\"|\"whitelist\")} [type]\n   *     Use this param to control the output type.\n   * @param {boolean} [isRebuild] - True if to rebuild the cache, false otherwise.\n   * @result {*}\n   *     Depends on the type param:\n   *     - raw: the original filter string\n   *     - pretty: the prettyfied filter string for usage in textareas\n   *     - matches: {Array<string>} all matches\n   *     - whitelist: A lookup table where all matches are true\n   */\n  getEdgeTypeFilter(type, isRebuild) {\n\n    let filter;\n\n    if (!isRebuild && this.edgeTypeFilter) {\n\n      filter = this.edgeTypeFilter;\n\n    } else {\n\n      const allETy = $tm.indeces.allETy;\n      const src = Object.keys(allETy);\n      const tObj = $tw.wiki.getTiddler(this.edgeTypeFilterTRef);\n\n      filter = {};\n      filter.raw = (tObj && tObj.fields.filter || '');\n      filter.pretty = utils.getPrettyFilter(filter.raw);\n      filter.matches = utils.getEdgeTypeMatches(filter.raw, allETy);\n      filter.whitelist = utils.getLookupTable(filter.matches);\n\n    }\n\n    return (type ? filter[type] : filter);\n\n  }\n\n  /**\n   * Whether or not this EdgeType is visible in this view.\n   *\n   * @param {EdgeType|string} id\n   * @return {*}\n   */\n  isEdgeTypeVisible(id) {\n\n    return utils.isEdgeTypeMatch(EdgeType.getInstance(id).id, this.edgeTypeFilter.raw);\n\n  }\n\n  /**\n   * Method will return a tiddlywiki node filter that is used to\n   * decide which nodes are displayed by the graph.\n   *\n   * @param {(\"raw\"|\"pretty\"|\"compiled\")} [type] - Use this param to control the output type.\n   * @param {boolean} [isRebuild=false] - True if to rebuild the cache, false otherwise.\n   * @result {*}\n   *     Depends on the type param:\n   *     - raw: the original filter string\n   *     - pretty: the prettyfied filter string for usage in textareas\n   *     - compiled: {Array<string>} all matches\n   */\n  getNodeFilter(type, isRebuild = false) {\n\n    let filter;\n\n    if (!isRebuild && this.nodeFilter) {\n\n      filter = this.nodeFilter;\n\n    } else {\n\n      filter = utils.makeHashMap();\n      const tObj = $tw.wiki.getTiddler(this.nodeFilterTRef);\n\n      filter.raw = (tObj && tObj.fields.filter) || '';\n      filter.pretty = utils.getPrettyFilter(filter.raw);\n      filter.compiled = $tw.wiki.compileFilter(filter.raw);\n\n    }\n\n    return (type ? filter[type] : filter);\n\n  }\n\n  /**\n   * This method will return the node data stored in the view.\n   *\n   * @todo When to delete obsolete data?\n   *\n   * @param {string} nodeId\n   * @param {boolean} [isRebuild] - True if to rebuild the cache, false otherwise.\n   * @result {Hashmap<Id, Object>} A Hashmap with node data.\n   */\n  getNodeData(nodeId, isRebuild) {\n\n    const data = (!isRebuild && this.nodeData\n      ? this.nodeData\n      : utils.parseFieldData(this.mapTRef, 'text', {}));\n\n    return (nodeId ? data[nodeId] : data);\n\n  }\n\n  /**\n   * A view equals another view either\n   *\n   * 1) if the js objects reference the same objects in the js runtime\n   * 2) or if the views have the same root and both views exist\n   *\n   * @param view\n   * @return {boolean}\n   */\n  equals(view) {\n\n    return view === this\n      || (ViewAbstraction.exists(view) && (new ViewAbstraction(view)).getRoot() === this.getRoot());\n\n  }\n\n  /**\n   * This function will merge the given data in the view's node store.\n   *\n   * If a property is set to null, it will be removed.\n   *\n   * If two arguments are provided, the first parameter is assumed\n   * to be a node id and the second to be the data object. The data\n   * will extend the existing data. If data is not an object, it is\n   * assumed to be a delete directive and consequently the node data\n   * in the store will be deleted.\n   *\n   * Otherwise, if a single object parameter is provided, it is regarded\n   * as a node collection and the whole object is used to extend the store.\n   *\n   * Note: The Adapter will routinely delete node content of nodes that are\n   * not contained in the view anymore.\n   */\n  saveNodeData(...args) {\n\n    const data = this.getNodeData();\n\n    if (args.length === 2) {\n\n      if (typeof args[1] === 'object') {\n\n        if (args[1] === null) {\n\n          delete data[args[0]];\n\n        } else {\n\n          data[args[0]] = Object.assign(data[args[0]] || {}, args[1]);\n        }\n      }\n\n    } else if (args.length === 1 && typeof args[0] === 'object') {\n\n      $tm.logger('log', 'Storing data in', this.mapTRef);\n\n      Object.assign(data, args[0]);\n\n    } else { // not allowed\n\n      throw new InvalidArgumentException(...args);\n    }\n\n    utils.writeFieldData(this.mapTRef, 'text', data, $tm.config.sys.jsonIndentation);\n\n    // register new values\n    this.nodeData = data;\n\n  }\n\n  /**\n   * Saves a node's position to the store\n   *\n   * @param {Node} node\n   */\n  saveNodePosition(node) {\n\n    if (node.id && node.x != null && node.y != null) {\n      // only pass coordinates to prevent other data from being stored!\n      this.saveNodeData(node.id, { x: node.x, y: node.y });\n    }\n\n  }\n\n  /**\n   * Saves a node's position to the store\n   *\n   * @param {Object} positions\n   */\n  saveNodePositions(positions) {\n\n    const { nodeData } = this;\n\n    for (let id in positions) {\n\n      nodeData[id] = nodeData[id] || {};\n      nodeData[id].x = positions[id].x;\n      nodeData[id].y = positions[id].y;\n\n    }\n\n    this.saveNodeData(nodeData);\n\n  }\n\n  /**\n   * Marks the node with the given id as central topic.\n   *\n   * @param nodeId\n   */\n  setCentralTopic(nodeId) {\n\n    this.setConfig('central-topic', nodeId);\n\n  }\n\n  /**\n   * Saves the provided style for the node with the specified id in the view's store.\n   *\n   * Note: The coordinates of the node on the map are not stored via this function.\n   * For this task, use saveNodePosition() instead.\n   *\n   * @param {string} nodeId\n   * @param {Object} style\n   */\n  saveNodeStyle(nodeId, style) {\n\n    // remove any previos style from store;\n    // @TODO: optimize this only null in style var needs to be removed\n    const data = this.getNodeData(nodeId) || {};\n\n    const pos = { x: data.x, y: data.y };\n\n    // tabula rasa! delete all previous properties\n    for (let p in data) {\n      delete data[p];\n    }\n\n    // save new style\n    this.saveNodeData(nodeId, {\n      ...style,\n      ...pos\n    });\n\n  }\n\n  /**\n   * The view's configTiddlerRef is stored in different tiddlers (paths).\n   * This function registers these paths to this the view instance.\n   *\n   * @private\n   * @params {ViewAbstraction|string} view\n   */\n  _registerPaths(view, isCreate) {\n\n    // main config is stored here\n    this.configTRef = ViewAbstraction._getRootPath(view);\n\n    // store for node properties (positions and local node styles)\n    this.mapTRef = `${this.configTRef}/map`;\n\n    // filter stores\n    this.nodeFilterTRef = `${this.configTRef}/filter/nodes`;\n    this.edgeTypeFilterTRef = `${this.configTRef}/filter/edges`;\n\n    this.snapshotTRef = `${this.getRoot()}/snapshot`;\n\n  }\n\n  /**\n   * Will create the config tiddler which means that the view will\n   * start to exist.\n   *\n   * @private\n   */\n  _createView({ isForce, protoView, isHidden } = {}) {\n\n    // destroy any former view that existed in this path\n    if (ViewAbstraction.exists(this)) {\n\n      if (!isForce) {\n\n        return;\n\n      }\n\n      this.destroy();\n    }\n\n    if (ViewAbstraction.exists(protoView)) {\n      utils.cp((new ViewAbstraction(protoView)).getRoot(), this.configTRef, true);\n    }\n\n    // create new view\n    const fields = {\n      title: this.configTRef,\n      id: utils.genUUID(), // maybe useful for future purposes…\n    };\n\n    if (!isHidden) {\n      fields[$tm.field.viewMarker] = true;\n    }\n\n    $tw.wiki.addTiddler(new $tw.Tiddler(\n      utils.getTiddler(this.configTRef), // in case we cloned the view\n      fields\n    ));\n\n    this.setEdgeTypeFilter(env.filter.defaultEdgeTypeFilter);\n\n  }\n\n  /**\n   * This method will rebuild the cache.\n   *\n   * @private\n   * @return {boolean} true if the cache was dirty, false if cache was up-to-date and did\n   */\n  _rebuildCache() {\n\n    this.config = this.getConfig(null, true);\n    this.nodeData = this.getNodeData(null, true);\n    this.nodeFilter = this.getNodeFilter(null, true);\n    this.edgeTypeFilter = this.getEdgeTypeFilter(null, true);\n\n  }\n\n  /**\n   * Will return a filter part that matches the node's id.\n   *\n   * E.g. [field:tmap.id[1748576e-74bb-4165-85bb-0d312e3e4f1f]]\n   *\n   * @private\n   *\n   * @param node\n   * @return {string}\n   */\n  static _getNodeIdFilterPart(node) {\n\n    const id = (typeof node === 'object' ? node.id : node);\n\n    return `[field:tmap.id[${id}]]`;\n\n  }\n\n  /**\n   * Will return the path to the config tiddler of this view, aka the view's root.\n   *\n   * @private\n   *\n   * @param {*} view - The constructor param to abstract or create the view.\n   * @result {string|undefined} The view config path.\n   */\n  static _getRootPath(view) {\n\n    if (view instanceof ViewAbstraction) {\n\n      return view.configTRef;\n\n    }\n\n    if (view instanceof $tw.Tiddler) { // is a tiddler object\n\n      view  = view.fields.title;\n\n    }\n\n    if (typeof view === 'string') {\n\n      // remove prefix and slash\n      const label = utils.getWithoutPrefix(view, `${$tm.path.views}/`);\n\n      // a valid label must not contain any slashes\n      if (label && !utils.hasSubString(label, '/')) {\n\n        return `${$tm.path.views}/${label}`;\n\n      }\n    }\n\n  }\n\n  /**\n   * A view exists if the the view's root exists as tiddler in the store.\n   *\n   * @return {ViewAbstraction|string}\n   */\n  static exists(view) {\n\n    if (!view) {\n\n      return false;\n    }\n\n    if (view instanceof ViewAbstraction) {\n\n      view = view.configTRef;\n\n    } else {\n\n      view = ViewAbstraction._getRootPath(view);\n    }\n\n    return utils.tiddlerExists(view);\n\n  }\n\n}\n\n/*** Exports *******************************************************/\n\nexport default ViewAbstraction;\n"],"sourceRoot":"../../../../../../src/plugins"}