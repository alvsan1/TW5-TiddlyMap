{"version":3,"sources":["felixhayashi/tiddlymap/js/graph/MapElementType.js"],"names":["MapElementType","id","root","fieldMeta","data","_fieldMeta","fullPath","isShipped","$tw","wiki","getSubTiddler","$tm","path","pluginRoot","_load","isFullPath","startsWith","tRef","_loadFromTiddler","Tiddler","field","tiddler","tObj","getTiddler","shadowTObj","rawData","utils","extend","fields","parser","parse","rawVal","call","tiddlerExists","style","isMerge","parseJSON","merge","silently","title","text","stringify","exists","Object","assign","getCreationFields","getModificationFields","addTiddler","JSON"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/graph/MapElementType.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/MapElementType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\n/**\n * @abstract\n */\nclass MapElementType {\n\n  constructor(id, root, fieldMeta, data) {\n\n    this.id = id;\n    this.root = root;\n    this._fieldMeta = fieldMeta;\n    this.fullPath = `${this.root}/${this.id}`;\n    this.isShipped = $tw.wiki.getSubTiddler($tm.path.pluginRoot, this.fullPath);\n\n    // finally get the data\n    this._load(data || this.fullPath);\n\n  }\n\n  /**\n   * Load the type's data. Depending on the constructor arguments,\n   * the data source can be a tiddler, a type store\n   *\n   * @private\n   */\n  _load(data) {\n\n    if (!data) {\n\n      return;\n    }\n\n    if (typeof data === 'string') { // assume id or full path\n\n      const isFullPath = utils.startsWith(data, this.root);\n      const tRef = (isFullPath ? data : `${this.root}/${data}`);\n      this._loadFromTiddler(tRef);\n\n    } else if (data instanceof $tw.Tiddler) {\n\n      this._loadFromTiddler(data);\n\n    } else if (typeof data === 'object') { // = type or a data object\n\n      for (let field in this._fieldMeta) {\n        this[field] = data[field];\n      }\n    }\n\n  }\n\n  /**\n   * Retrieve all data from the tiddler provided. If a shadow tiddler\n   * with the same id exists, its data is merged during the load\n   * process.\n   *\n   * @private\n   */\n  _loadFromTiddler(tiddler) {\n\n    const tObj = utils.getTiddler(tiddler);\n\n    if (!tObj) {\n\n      return;\n    }\n\n    const shadowTObj = $tw.wiki.getSubTiddler($tm.path.pluginRoot, this.fullPath) || {};\n\n    // copy object to allow manipulation of the data\n    const rawData = $tw.utils.extend({}, shadowTObj.fields, tObj.fields);\n    // allow parsers to transform the raw field data\n    for (let field in this._fieldMeta) {\n\n      const parser = this._fieldMeta[field].parse;\n      const rawVal = rawData[field];\n\n      this[field] = (parser ? parser.call(this, rawVal) : rawVal);\n    }\n\n  }\n\n  /**\n   * Method to determine whether or not this type exists. A type\n   * exists if a tiddler with the type's id can be found below\n   * the type's root path.\n   *\n   * @return {boolean} True if the type exists, false otherwise.\n   */\n  exists() {\n\n    return utils.tiddlerExists(this.fullPath);\n\n  }\n\n  setStyle(style, isMerge) {\n\n    // preprocessing: try to turn string into json\n    if (typeof style === 'string') {\n\n      style = utils.parseJSON(style);\n\n    }\n\n    // merge or override\n    if (typeof style === 'object') {\n\n      if (isMerge) {\n\n        utils.merge(this.style, style);\n\n      } else {\n\n        this.style = style;\n\n      }\n    }\n\n  }\n\n  /**\n   * Store the type object as tiddler in the wiki. If the `tRef`\n   * property is not provided, the default type path prefix\n   * will be used with the type id appended. Stringifiers provided in\n   * the field meta object (that was passed to the constructor) are\n   * called.\n   *\n   * @param {string} [tRef] - If `tRef` is provided, the type\n   *     data will be written into this tiddler and the id property\n   *     is added as extra field value. Only do this is only for\n   *     dumping purposes!\n   * @param {boolean} [silently=false] do not update the modification date\n   */\n  save(tRef, silently) {\n\n    if (!tRef) {\n\n      tRef = this.fullPath;\n\n    } else if (typeof tRef !== 'string') {\n\n      return;\n\n    }\n\n    // also add an empty text field to guard against\n    // https://github.com/Jermolene/TiddlyWiki5/issues/2025\n    const fields = {\n      title: tRef,\n      text: ''\n    };\n\n    if (!utils.startsWith(tRef, this.root)) {\n\n      // = not the standard path for storing this type!\n      // in this case we add the id to the output.\n      fields.id = this.id;\n\n    }\n\n    // allow parsers to transform the raw field data\n    for (let field in this._fieldMeta) {\n\n      const stringify = this._fieldMeta[field].stringify;\n\n      fields[field] = (stringify ? stringify.call(this, this[field]) : this[field]);\n    }\n\n    if (!this.exists()) { // newly created\n      Object.assign(fields, $tw.wiki.getCreationFields());\n    }\n\n    if (silently !== true) {\n      // add modification date to the output;\n      Object.assign(fields, $tw.wiki.getModificationFields());\n    }\n\n    $tw.wiki.addTiddler(new $tw.Tiddler(fields));\n\n  }\n}\n\n/**\n * A list of fields that are used as data identifiers. Only these\n * listed keys are acknowledged by the load and save functions in\n * this class.\n *\n * This object resembles tw's field modules that are used by\n * `boot.js` to decide how fields are parsed and stringified again.\n */\nMapElementType.fieldMeta = {\n  'description': {},\n  'style': {\n    parse: utils.parseJSON,\n    stringify: JSON.stringify\n  },\n  'modified': {}, // translation handled by TW's core\n  'created': {} // translation handled by TW's core\n};\n\n/*** Exports *******************************************************/\n\nexport default MapElementType;\n"],"sourceRoot":"../../../../../../src/plugins"}