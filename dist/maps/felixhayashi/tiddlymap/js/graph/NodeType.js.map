{"version":3,"sources":["felixhayashi/tiddlymap/js/graph/NodeType.js"],"names":["NodeType","id","data","getWithoutPrefix","$tm","path","nodeTypes","fieldMeta","Object","freeze","src","scope","getMatches","$tw","wiki","allTitles","getInstance","parse","isNaN","raw","parseInt","stringify","isInteger","num","toString","getWithoutNewLines"],"mappings":";;;;;;;;;;AAaA;;;;AACA;;;;;;;;;;+eAdA;AACA;;;;;;;;;;AAUA;;AAKA;;AAEA;;;;;IAKMA,Q;;;AAEJ,oBAAYC,EAAZ,EAAgBC,IAAhB,EAAsB;AAAA;;AAEpBD,SAAM,OAAOA,EAAP,KAAc,QAAd,GACF,gBAAME,gBAAN,CAAuBF,EAAvB,EAA2BG,IAAIC,IAAJ,CAASC,SAAT,GAAqB,GAAhD,CADE,GAEF,cAFJ;;AAIA;;AANoB,oHAOdL,EAPc,EAOVG,IAAIC,IAAJ,CAASC,SAPC,EAOUN,SAASO,SAPnB,EAO8BL,IAP9B;;AASpBM,WAAOC,MAAP;;AAToB;AAWrB;;AAED;;;;;;;;;;;kCAOcC,G,EAAK;;AAEjB,aAAQ,KAAKC,KAAL,GAAa,gBAAMC,UAAN,CAAiB,KAAKD,KAAtB,EAA6BD,OAAOG,IAAIC,IAAJ,CAASC,SAAT,EAApC,CAAb,GAAyE,EAAjF;AAED;;;;;;AAIH;;;;;;;;;;AAQAf,SAASgB,WAAT,GAAuB;AAAA,SAAMf,cAAcD,QAAd,GAAyBC,EAAzB,GAA8B,IAAID,QAAJ,CAAaC,EAAb,CAApC;AAAA,CAAvB;;AAEAD,SAASO,SAAT,gBACK,yBAAeA,SADpB;AAEE,UAAQ,EAFV;AAGE,cAAY;AACVU,WAAO;AAAA,aAAOC,MAAMC,GAAN,IAAa,CAAb,GAAiBC,SAASD,GAAT,CAAxB;AAAA,KADG;AAEVE,eAAW;AAAA,aAAO,gBAAMC,SAAN,CAAgBC,GAAhB,IAAuBA,IAAIC,QAAJ,EAAvB,GAAwC,GAA/C;AAAA;AAFD,GAHd;AAOE,WAAS;AACPH,eAAW,gBAAMI;AADV,GAPX;AAUE,aAAW,EAVb;AAWE,aAAW;AAXb;;AAcA;;kBAEezB,Q","file":"../../../../../felixhayashi/tiddlymap/js/graph/NodeType.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/NodeType\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport MapElementType from '$:/plugins/felixhayashi/tiddlymap/js/MapElementType';\nimport utils          from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\n/**\n * Used to define the type of a node.\n *\n * Note: NodeType instances are immutable (frozen).\n */\nclass NodeType extends MapElementType {\n\n  constructor(id, data) {\n\n    id = (typeof id === 'string'\n      ? utils.getWithoutPrefix(id, $tm.path.nodeTypes + '/')\n      : 'tmap:unknown');\n\n    // call the parent constructor\n    super(id, $tm.path.nodeTypes, NodeType.fieldMeta, data);\n\n    Object.freeze(this);\n\n  }\n\n  /**\n   * Get all tiddlers that inherit this type.\n   *\n   * @param {Array<TiddlerReference>} [src=$tw.wiki.allTitles()] - A list\n   *     of tiddlers that is searched for inheritors.\n   * @return {Array<TiddlerReference>} The inheritors.\n   */\n  getInheritors(src) {\n\n    return (this.scope ? utils.getMatches(this.scope, src || $tw.wiki.allTitles()) : []);\n\n  }\n\n}\n\n/**\n * @see https://github.com/babel/babel/issues/4854\n * @param {string} id - Either the edge type id (name)\n *     or a tiddler reference denoting the type or an\n *     `EdgeType` object (that is directly bounced back). If the\n *     id can be translated into a tiddler object that resides in\n *     the edge type path, then its data is retrieved automatically.\n */\nNodeType.getInstance = id => id instanceof NodeType ? id : new NodeType(id);\n\nNodeType.fieldMeta = {\n  ...MapElementType.fieldMeta,\n  'view': {},\n  'priority': {\n    parse: raw => isNaN(raw) ? 1 : parseInt(raw),\n    stringify: num => utils.isInteger(num) ? num.toString() : '1',\n  },\n  'scope': {\n    stringify: utils.getWithoutNewLines\n  },\n  'fa-icon': {},\n  'tw-icon': {},\n};\n\n/*** Exports *******************************************************/\n\nexport default NodeType;\n"],"sourceRoot":"../../../../../../src/plugins"}