{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/EdgeListWidget.js"],"names":["EdgeListWidget","parseTreeNode","options","parent","nextSibling","parentDomNode","computeAttributes","execute","renderChildren","nodes","getVariable","filter","getAttribute","direction","allETy","$tm","indeces","matches","getEdgeTypeMatches","typeWL","getLookupTable","adapter","getNeighbours","neighbours","edges","entries","id","edge","neighbour","to","from","push","type","children","length","wasEmpty","getEmptyMessage","removeChildDomNodes","makeChildWidgets","parser","wiki","parseText","parseAsInline","tree","changedTiddlers","changedAttributes","hasElements","refreshSelf","tRef","isSystemOrDraft","refreshChildren","exports"],"mappings":";;;;AAaA;;AACA;;;;;;;;;;+eAdA;AACA;;;;;;;;;;AAUA;;AAKA;;IAEMA,c;;;AAEJ,0BAAYC,aAAZ,EAA2BC,OAA3B,EAAoC;AAAA;;AAAA,2HAE5BD,aAF4B,EAEbC,OAFa;AAInC;;;;2BAEMC,M,EAAQC,W,EAAa;;AAE1B,WAAKC,aAAL,GAAqBF,MAArB;AACA,WAAKG,iBAAL;AACA,WAAKC,OAAL;AACA,WAAKC,cAAL,CAAoBL,MAApB,EAA4BC,WAA5B;AAED;;;8BAES;;AAER,UAAMK,QAAQ,CAAE,KAAKC,WAAL,CAAiB,gBAAjB,CAAF,CAAd;AACA,UAAMC,SAAS,KAAKC,YAAL,CAAkB,QAAlB,EAA4B,EAA5B,CAAf;AACA,UAAMC,YAAY,KAAKD,YAAL,CAAkB,WAAlB,EAA+B,MAA/B,CAAlB;AACA,UAAME,SAASC,IAAIC,OAAJ,CAAYF,MAA3B;AACA,UAAMG,UAAU,gBAAMC,kBAAN,CAAyBP,MAAzB,EAAiCG,MAAjC,CAAhB;;AAEA,UAAMZ,UAAU;AACdiB,gBAAQ,gBAAMC,cAAN,CAAqBH,OAArB,CADM;AAEdJ,mBAAWA;AAFG,OAAhB;;AAKA;;AAbQ,kCAc6BE,IAAIM,OAAJ,CAAYC,aAAZ,CAA0Bb,KAA1B,EAAiCP,OAAjC,CAd7B;AAAA,UAcOqB,UAdP,yBAcAd,KAdA;AAAA,UAcmBe,KAdnB,yBAcmBA,KAdnB;;AAgBR,UAAIC,UAAU,EAAd;AACA,WAAK,IAAIC,EAAT,IAAeF,KAAf,EAAsB;;AAEpB,YAAMG,OAAOH,MAAME,EAAN,CAAb;AACA,YAAME,YAAYL,WAAWI,KAAKE,EAAhB,KAAuBN,WAAWI,KAAKG,IAAhB,CAAzC;;AAEA,YAAI,CAACF,SAAL,EAAgB;AAAE;AAChB;AACD;;AAED;AACAH,gBAAQM,IAAR,CAAa;AACXC,gBAAM,mBADK;AAEXL,gBAAMA,IAFK;AAGXR,kBAAQjB,QAAQiB,MAHL;AAIXS,qBAAWA,SAJA;AAKX;AACA;AACAK,oBAAU,KAAKhC,aAAL,CAAmBgC;AAPlB,SAAb;AASD;;AAED,UAAI,CAACR,QAAQS,MAAb,EAAqB;;AAEnB,aAAKC,QAAL,GAAgB,IAAhB;AACAV,kBAAU,KAAKW,eAAL,EAAV;AAED,OALD,MAKO,IAAI,KAAKD,QAAT,EAAmB;;AAExB;AACA,aAAKE,mBAAL;AAED;;AAED,WAAKC,gBAAL,CAAsBb,OAAtB;AAED;;;sCAEiB;;AAEhB,UAAMc,SAAS,KAAKC,IAAL,CAAUC,SAAV,CACb,qBADa,EAEb,KAAK7B,YAAL,CAAkB,cAAlB,EAAkC,EAAlC,CAFa,EAGb,EAAE8B,eAAe,IAAjB,EAHa,CAAf;;AAMA,aAAOH,SAASA,OAAOI,IAAhB,GAAuB,EAA9B;AAED;;;4BAEOC,e,EAAiB;;AAEvB,UAAMC,oBAAoB,KAAKvC,iBAAL,EAA1B;;AAEA,UAAI,gBAAMwC,WAAN,CAAkBD,iBAAlB,CAAJ,EAA0C;;AAExC,aAAKE,WAAL;;AAEA,eAAO,IAAP;AACD;;AAED,WAAK,IAAIC,IAAT,IAAiBJ,eAAjB,EAAkC;AAChC,YAAI,CAAC,gBAAMK,eAAN,CAAsBD,IAAtB,CAAL,EAAkC;;AAEhC,eAAKD,WAAL;;AAEA,iBAAO,IAAP;AACD;AACF;;AAED;AACA,aAAO,KAAKG,eAAL,CAAqBN,eAArB,CAAP;AAED;;;;;;AAGH;;AAEAO,QAAQ,kBAAR,IAA8BnD,cAA9B","file":"../../../../../felixhayashi/tiddlymap/js/widget/EdgeListWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/EdgeListWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/*** Code **********************************************************/\n\nclass EdgeListWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n\n    super(parseTreeNode, options);\n\n  }\n\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n    this.computeAttributes();\n    this.execute();\n    this.renderChildren(parent, nextSibling);\n\n  };\n\n  execute() {\n\n    const nodes = [ this.getVariable('currentTiddler') ];\n    const filter = this.getAttribute('filter', '');\n    const direction = this.getAttribute('direction', 'both');\n    const allETy = $tm.indeces.allETy;\n    const matches = utils.getEdgeTypeMatches(filter, allETy);\n\n    const options = {\n      typeWL: utils.getLookupTable(matches),\n      direction: direction\n    };\n\n    // retrieve nodes and edges\n    const { nodes: neighbours, edges } = $tm.adapter.getNeighbours(nodes, options);\n\n    let entries = [];\n    for (let id in edges) {\n\n      const edge = edges[id];\n      const neighbour = neighbours[edge.to] || neighbours[edge.from];\n\n      if (!neighbour) { // obsolete edge from old times;\n        continue;\n      }\n\n      // make item template\n      entries.push({\n        type: 'tmap-edgelistitem',\n        edge: edge,\n        typeWL: options.typeWL,\n        neighbour: neighbour,\n        // the children of this widget (=what is wrapped inside the\n        // widget-element's body) is used as template for the list items\n        children: this.parseTreeNode.children\n      });\n    }\n\n    if (!entries.length) {\n\n      this.wasEmpty = true;\n      entries = this.getEmptyMessage();\n\n    } else if (this.wasEmpty) {\n\n      // we need to remove the empty message\n      this.removeChildDomNodes();\n\n    }\n\n    this.makeChildWidgets(entries);\n\n  }\n\n  getEmptyMessage() {\n\n    const parser = this.wiki.parseText(\n      'text/vnd.tiddlywiki',\n      this.getAttribute('emptyMessage', ''),\n      { parseAsInline: true }\n    );\n\n    return parser ? parser.tree : [];\n\n  }\n\n  refresh(changedTiddlers) {\n\n    const changedAttributes = this.computeAttributes();\n\n    if (utils.hasElements(changedAttributes)) {\n\n      this.refreshSelf();\n\n      return true;\n    }\n\n    for (let tRef in changedTiddlers) {\n      if (!utils.isSystemOrDraft(tRef)) {\n\n        this.refreshSelf();\n\n        return true;\n      }\n    }\n\n    // let children decide for themselves\n    return this.refreshChildren(changedTiddlers);\n\n  }\n}\n\n/*** Exports *******************************************************/\n\nexports['tmap-connections'] = EdgeListWidget;\n"],"sourceRoot":"../../../../../../src/plugins"}