{"version":3,"sources":["felixhayashi/tiddlymap/js/widget/MapWidget.js"],"names":["env","MapWidget","parseTreeNode","options","getAttr","getAttribute","isDebug","isTrue","$tm","config","sys","debug","bindTo","callbackManager","computeAttributes","editorMode","clickToUse","id","getStateQualifier","widgetPopupsPath","path","tempPopups","addTWlisteners","handleCreateView","handleRenameView","handleDeleteView","handleDeleteElement","handleEditView","handleGenerateWidget","handleSetCentralTopic","handleSaveCanvas","handleFocusNode","repaintGraph","visListeners","handleVisSingleClickEvent","handleVisDoubleClickEvent","handleVisStabilizedEvent","handleVisSelectNode","handleVisDeselectNode","handleVisDragStart","handleVisDragEnd","handleVisHoverElement","handleVisBlurElement","handleVisBeforeDrawing","handleVisAfterDrawing","handleVisLoading","handleVisLoadingDone","windowDomListeners","handleResizeEvent","handleClickEvent","handleCanvasMouseMove","canvasDomListeners","handleCanvasKeyup","handleCanvasKeydown","handleCanvasScroll","handleContextMenu","widgetDomListeners","handleWidgetKeyup","handleWidgetKeydown","conVector","from","to","edge","callback","eTyFilter","view","getEdgeTypeFilter","param","fromLabel","adapter","selectNodeById","label","toLabel","getLabel","raw","dialogManager","open","isConfirmed","outTObj","str","getText","type","getInstance","namespace","getIdParts","marker","name","getConfig","getId","exists","save","insertEdge","isPreventZoomOnNextUpdate","isEdgeTypeVisible","pretty","getEntry","ref","sysMeta","setEntry","tiddlerExists","setText","touch","misc","defaultViewLabel","n1","insertNode","x","y","n2","message","args","Array","prototype","slice","call","arguments","unshift","logger","apply","parent","nextSibling","parentDomNode","domNode","document","createElement","insertBefore","registerClassNames","viewHolderRef","getViewHolderRef","getView","graphBarDomNode","$tw","utils","addClass","appendChild","graphDomNode","isPreviewed","isTiddlyWikiFakeDom","renderPreview","renderFullWidget","header","body","snapshotTRef","getRoot","snapshotTObj","getTiddler","innerHTML","className","placeholder","makeChildWidget","getTranscludeNode","renderChildren","widget","setDomListeners","window","addLoadingBar","tooltip","showDelay","popups","delay","contextMenu","hideOnClick","leavingDelay","sidebar","getFirstElementByClassName","isInSidebar","contains","rebuildEditorBar","initAndRenderGraph","registry","push","reloadRefreshTriggers","checkForFreshInstall","mainEditorId","url","query","toggleEnlargedMode","graphLoadingBarDomNode","removeChildDomNodes","unicodeBtnClass","activeUnicodeBtnClass","variables","widgetQualifier","widgetTempPath","isViewBound","String","viewRoot","viewLabel","viewHolder","edgeTypeFilter","edgeTypeFilterTRef","allEdgesFilter","selector","allEdgeTypes","neighScopeBtnClass","isEnabled","rasterMenuBtnClass","setVariable","getTiddlerNode","children","graphBar","el","getElementNode","focusButton","makeChildWidgets","firstChild","changedTiddlers","updates","network","isZombieWidget","refresh","isViewSwitched","hasChangedAttributes","isViewUpdated","update","reloadBackgroundImage","rebuildGraph","resetFocus","duration","nodeTypes","hasChangedElements","refreshChildren","isForce","hide","remove","refreshTriggers","parseStringArray","i","length","add","handleTriggeredRefresh","hidePopups","hasNetworkStabilized","changes","rebuildGraphData","changedNodes","withoutPosition","physics","visOptions","solver","centralGravity","setOptions","hasElements","graphData","nodesById","stabilize","start","graph","getGraph","refreshDataSet","nodes","changedEdges","edges","edgesById","setField","getTiddlersByIds","stop","startsWith","localHolders","Object","keys","maybeMatches","inGraph","isShowNeighbourhood","tRef","isSystemOrDraft","modified","nodeFilter","getNodeFilter","matches","getMatches","_destructVis","getVisOptions","DataSet","makeHashMap","setEnabled","enabled","Network","canvas","getElementsByTagName","networkDomNode","tabIndex","event","on","bind","addGraphButtons","focus","ev","nodeIds","getSelectedNodes","ctrlKey","preventDefault","keyCode","handleAddNodesToClipboard","notify","handlePasteNodesFromClipboard","allNodes","selectNodes","role","ucFirst","handleConnectionEvent","openTiddlerWithId","handleRemoveElements","getSelection","paramObject","elements","buttons","selectRect","selectedNodes","redraw","stopPropagation","target","mouse","DOMtoCanvas","offsetX","offsetY","span","nodePositions","getPositions","isPointWithin","inArray","assignActiveStyle","isZoomAllowed","enlargedMode","classList","interaction","isVisSettingInSync","zoomView","nodeId","getNodeAt","show","div","mode","registerTransclude","contextMenuWidget","render","focusButtonStateTRef","deleteByPrefix","isLiveView","clipBoard","ids","addNode","get","returnType","removeNode","globalOptions","vis","localOptions","parseJSON","merge","manipulation","deleteNode","data","resetVisManipulationBar","deleteEdge","addEdge","handleInsertNode","editNode","handleEditNode","editEdge","stabilization","iterations","visCallback","disableEditMode","enableEditMode","getElementsByClassName","getField","isClone","newView","isCreate","protoView","setView","isLocked","references","getOccurrences","count","toString","refFilter","joinAndWrap","rename","visInherited","JSON","stringify","viewConfig","preselects","createdOn","getCreationDate","numberOfNodes","numberOfEdges","dialog","extend","getPropertiesByPrefix","fields","prvBg","setConfig","saveNodePositions","curBg","nf","eTf","setNodeFilter","setEdgeTypeFilter","tempImagePath","createAndSaveSnapshot","defaultName","getSnapshotTitle","snapshot","width","height","action","handleDownloadSnapshot","cp","dispatchEvent","navigateTo","addPlaceholder","wiki","deleteTiddler","title","a","download","href","getSnapshot","MouseEvent","addTiddler","Tiddler","text","Date","stripPreamble","toDataURL","getWithoutPrefix","viewname","openStandardConfirmDialog","destroy","msg","trigger","curTiddler","liveTab","fallbackView","handleRemoveNodes","handleRemoveEdges","edgeIds","deleteEdges","tiddlers","params","stringifyList","deletionCount","success","deleteNodes","findAndRemoveClassNames","scrollTop","pContainer","rootWidget","setCentralTopic","properties","idsOfNodesWithoutPosition","undefined","setNodesMoveable","fitGraph","scale","animation","getContainer","clearTimeout","activeFitTimeout","fit","easingFunction","setTimeout","node","isMatch","makeNode","tObj","tracker","getTiddlerById","globalDefaults","localDefaults","nodeStylesByTRef","getInheritedNodeStyles","groupStyles","globalNodeStyle","color","nodeData","getNodeData","field","nodeIcon","nodeLabel","addToPreselects","scope","store","global","p","local","saveNodeStyle","isActivated","singleClickMode","handleOpenMapElementEvent","pointer","typeId","handleEditEdgeType","behaviour","edgeClickBehaviour","rect","getBoundingClientRect","distRight","clientWidth","left","distBottom","parseInt","calculatedHeight","innerHeight","top","style","evt","selected","button","isArray","defaultColor","colorObj","highlight","hover","pos","getNearestRasterPosition","draggedNode","context2d","backgroundImage","drawImage","drawRaster","getScale","getViewPosition","getRect","beginPath","globalAlpha","fillStyle","fillRect","strokeStyle","strokeRect","rPos","moveTo","lineTo","stroke","arc","Math","PI","fill","signature","outType","inType","descr","nodeInfo","renderText","tooltipWidget","indeces","allETy","description","isVisInEditMode","isShown","populator","constructTooltip","total","display","setAttribute","draftTRef","findDraft","wasInDraftAlready","tiddlerTitle","originalTRef","deleteTiddlers","bounds","navigateFromTitle","getVariable","navigateFromNode","navigateFromClientRect","right","bottom","viewName","holderRef","viewRef","views","genUUID","defaultViewHolder","noCache","bgFieldValue","imgTObj","img","Image","ajaxCallback","b64","src","onload","urlField","getImgFromWeb","makeDataUri","isInFS","hasClass","enable","b","toggleClass","isMoveable","isFixed","fixed","buttonEvents","addEventListener","setGraphButtonEnabled","tmap","tiddlymap"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/widget/MapWidget.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/widget/MapWidget\ntype: application/javascript\nmodule-type: widget\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport CallbackManager      from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction      from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType             from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport Popup                from '$:/plugins/felixhayashi/tiddlymap/js/Popup';\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport { widget as Widget } from '$:/core/modules/widgets/widget.js';\nimport utils                from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport SelectionRectangle   from '$:/plugins/felixhayashi/tiddlymap/js/lib/SelectionRectangle';\nimport * as env             from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\n/**\n * The map widget is responsible for drawing the actual network\n * diagrams.\n *\n * @constructor\n */\nclass MapWidget extends Widget {\n\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n\n    // create shortcuts for services and frequently used vars\n    this.getAttr = this.getAttribute;\n    this.isDebug = utils.isTrue($tm.config.sys.debug, false);\n\n    // force early binding of functions to this context\n    utils.bindTo(this, [\n      'constructTooltip',\n      'handleResizeEvent',\n      'handleClickEvent',\n      'handleCanvasKeyup',\n      'handleCanvasKeydown',\n      'handleCanvasScroll',\n      'handleCanvasMouseMove',\n      'handleWidgetKeyup',\n      'handleWidgetKeydown',\n      'handleTriggeredRefresh',\n      'handleContextMenu'\n    ]);\n\n    // instanciate managers\n    this.callbackManager = new CallbackManager();\n\n    // make the html attributes available to this widget\n    this.computeAttributes();\n    this.editorMode = this.getAttr('editor');\n    this.clickToUse = utils.isTrue(this.getAttr('click-to-use'), false);\n\n    // who am I? the id is used for debugging and special cases\n    this.id = this.getAttr('object-id') || this.getStateQualifier();\n\n    this.widgetPopupsPath = $tm.path.tempPopups + '/' + this.id;\n\n    // register listeners that are available in editor mode\n    if (this.editorMode) {\n      utils.addTWlisteners({\n        'tmap:tm-create-view': this.handleCreateView,\n        'tmap:tm-rename-view': this.handleRenameView,\n        'tmap:tm-delete-view': this.handleDeleteView,\n        'tmap:tm-delete-element': this.handleDeleteElement,\n        'tmap:tm-edit-view': this.handleEditView,\n        'tmap:tm-generate-widget': this.handleGenerateWidget,\n        'tmap:tm-toggle-central-topic': this.handleSetCentralTopic,\n        'tmap:tm-save-canvas': this.handleSaveCanvas\n      }, this, this);\n    }\n\n    // register listeners that are available in any case\n    utils.addTWlisteners({\n      'tmap:tm-focus-node': this.handleFocusNode,\n      'tmap:tm-reset-focus': this.repaintGraph\n    }, this, this);\n\n    // Visjs handlers\n    this.visListeners = {\n      'click': this.handleVisSingleClickEvent,\n      'doubleClick': this.handleVisDoubleClickEvent,\n      'stabilized': this.handleVisStabilizedEvent,\n      'selectNode': this.handleVisSelectNode,\n      'deselectNode': this.handleVisDeselectNode,\n      'dragStart': this.handleVisDragStart,\n      'dragEnd': this.handleVisDragEnd,\n      'hoverNode': this.handleVisHoverElement,\n      'hoverEdge': this.handleVisHoverElement,\n      'blurNode': this.handleVisBlurElement,\n      'blurEdge': this.handleVisBlurElement,\n      'beforeDrawing': this.handleVisBeforeDrawing,\n      'afterDrawing': this.handleVisAfterDrawing,\n      'stabilizationProgress': this.handleVisLoading,\n      'stabilizationIterationsDone': this.handleVisLoadingDone\n    };\n\n    this.windowDomListeners = {\n      'resize': [ this.handleResizeEvent, false ],\n      'click': [ this.handleClickEvent, false ],\n      'mousemove': [ this.handleCanvasMouseMove, true ],\n    };\n\n    this.canvasDomListeners = {\n      'keyup': [ this.handleCanvasKeyup, true ],\n      'keydown': [ this.handleCanvasKeydown, true ],\n      'mousewheel': [ this.handleCanvasScroll, true ],\n      'DOMMouseScroll': [ this.handleCanvasScroll, true ],\n      'contextmenu': [ this.handleContextMenu, true ],\n    };\n\n    this.widgetDomListeners = {\n      'keyup': [ this.handleWidgetKeyup, true ],\n      'keydown': [ this.handleWidgetKeydown, true ],\n    };\n\n    this.conVector = { from: null, to: null };\n  }\n\n  /**\n   * This handler will open a dialog that allows the user to create a\n   * new relation between two edges. This includes, that the user\n   * gets a chance to specify the edgetype of the connection.\n   *\n   * If an edge-type namespace has been declared for the entire view,\n   * then add it to the `id` of the specified type…\n   *   - …if the type doesn't exist yet.\n   *   - …if the type doesn't contain a namespace already, regardless\n   *     whether it exists or not.\n   *\n   * Once the user confirmed the dialog, the edge is persisted.\n   *\n   * Note: this should not trigger a zoom.\n   *\n   * @param {Edge} edge - A javascript object that contains at least\n   *    the properties 'from' and 'to'\n   * @param {function} [callback] - A function with the signature\n   *    function(isConfirmed);\n   */\n  handleConnectionEvent(edge, callback) {\n\n    const eTyFilter = this.view.getEdgeTypeFilter();\n\n    const param = {\n      fromLabel: $tm.adapter.selectNodeById(edge.from).label,\n      toLabel: $tm.adapter.selectNodeById(edge.to).label,\n      view: this.view.getLabel(),\n      eTyFilter: eTyFilter.raw\n    };\n\n    $tm.dialogManager.open('getEdgeType', param, (isConfirmed, outTObj) => {\n\n      if (isConfirmed) {\n\n        const str = utils.getText(outTObj);\n        let type = EdgeType.getInstance(str);\n\n        if (!type.namespace) {\n\n          const { marker, name } = EdgeType.getIdParts(type.id);\n          const namespace = this.view.getConfig('edge_type_namespace');\n          type = EdgeType.getInstance(EdgeType.getId(marker, namespace, name));\n\n        }\n\n        // persist the type if it doesn't exist\n        if (!type.exists()) {\n          type.save();\n        }\n\n        // add type to edge\n        edge.type = type.id;\n        $tm.adapter.insertEdge(edge);\n\n        // prevent zoom\n        this.isPreventZoomOnNextUpdate = true;\n\n        if (!this.view.isEdgeTypeVisible(type)) {\n\n          $tm.dialogManager.open('edgeNotVisible', {\n            type: type.id,\n            view: this.view.getLabel(),\n            eTyFilter: eTyFilter.pretty\n          });\n\n        }\n\n      }\n\n      if (typeof callback === 'function') {\n        callback(isConfirmed);\n      }\n\n    });\n\n  }\n\n  /**\n   * The first time a map is opened, we want to display a welcome message.\n   * Once shown, a flag is set and the message is not displayed again.\n   */\n  checkForFreshInstall() {\n\n    if (!utils.getEntry($tm.ref.sysMeta, 'showWelcomeMessage', true)) {\n      return;\n    }\n\n    utils.setEntry($tm.ref.sysMeta, 'showWelcomeMessage', false);\n\n    $tm.dialogManager.open('welcome', {}, (isConfirmed, outTObj) => {\n\n      if (utils.tiddlerExists('$:/plugins/felixhayashi/topstoryview')) {\n\n        utils.setText('$:/view', 'top');\n        utils.setText('$:/config/Navigation/openLinkFromInsideRiver', 'above');\n        utils.setText('$:/config/Navigation/openLinkFromOutsideRiver', 'top');\n        utils.setText('$:/themes/tiddlywiki/vanilla/options/sidebarlayout', 'fixed-fluid');\n\n        // trigger a save and reload message\n        utils.touch('$:/plugins/felixhayashi/topstoryview');\n      }\n\n      const view = $tm.misc.defaultViewLabel;\n\n      const n1 = $tm.adapter.insertNode({ label: 'Have fun with', x: 0, y: 0 }, view);\n      const n2 = $tm.adapter.insertNode({ label: 'TiddlyMap!!', x: 100, y: 100 }, view);\n\n      $tm.adapter.insertEdge({ from: n1.id, to: n2.id });\n\n    });\n\n  }\n\n  /**\n   * A very basic dialog that will tell the user he/she has to make\n   * a choice.\n   *\n   * @param {function} [callback] - A function with the signature\n   *     function(isConfirmed).\n   * @param {string} [message] - An small optional message to display.\n   */\n  openStandardConfirmDialog(callback, message) {\n\n    const param = { message : message };\n    $tm.dialogManager.open('getConfirmation', param, callback);\n\n  }\n\n  /**\n   * An extention of the default logger mechanism. It works like\n   * `this.logger` but will include the object id of the widget\n   * instance.\n   *\n   * @param {string} type - The type of the message (debug, info, warning…)\n   *     which is exactly the same as in `console[type]`.\n   * @param {...*} message - An infinite number of arguments to be printed\n   *     (just like console).\n   */\n  logger(type, message /*, more stuff*/) {\n\n    if (this.isDebug) {\n\n      const args = Array.prototype.slice.call(arguments, 1);\n      args.unshift('@' + this.id);\n      args.unshift(type);\n      $tm.logger.apply(this, args);\n\n    }\n\n  }\n\n  /**\n   * Method to render this widget into the DOM.\n   *\n   * Note that we do not add this.domNode to the list of domNodes\n   * since this widget does never remove itself during a refresh.\n   *\n   * @override\n   */\n  render(parent, nextSibling) {\n\n    this.parentDomNode = parent;\n\n    this.domNode = this.document.createElement('div');\n    parent.insertBefore(this.domNode, nextSibling);\n\n    // add widget classes\n    this.registerClassNames(this.domNode);\n\n    // get view and view holder\n    this.viewHolderRef = this.getViewHolderRef();\n    this.view = this.getView();\n\n    // create the header div\n    this.graphBarDomNode = this.document.createElement('div');\n    $tw.utils.addClass(this.graphBarDomNode, 'tmap-topbar');\n    this.domNode.appendChild(this.graphBarDomNode);\n\n    // create body div\n    this.graphDomNode = this.document.createElement('div');\n    this.domNode.appendChild(this.graphDomNode);\n\n    $tw.utils.addClass(this.graphDomNode, 'tmap-vis-graph');\n\n    if (utils.isPreviewed(this) || this.domNode.isTiddlyWikiFakeDom) {\n\n      $tw.utils.addClass(this.domNode, 'tmap-static-mode');\n      this.renderPreview(this.graphBarDomNode, this.graphDomNode);\n\n    } else {\n\n      // render the full widget\n      this.renderFullWidget(this.domNode, this.graphBarDomNode, this.graphDomNode);\n\n    }\n\n  }\n\n  /**\n   * When the widget is only previewed we do some alternative rendering.\n   */\n  renderPreview(header, body) {\n\n    const snapshotTRef = this.view.getRoot() + '/snapshot';\n    const snapshotTObj = utils.getTiddler(snapshotTRef);\n\n    const label = this.document.createElement('span');\n    label.innerHTML = this.view.getLabel();\n    label.className = 'tmap-view-label';\n    header.appendChild(label);\n\n    if (snapshotTObj) {\n\n      // Construct child widget tree\n      const placeholder = this.makeChildWidget(utils.getTranscludeNode(snapshotTRef), true);\n      placeholder.renderChildren(body, null);\n\n    } else {\n\n      $tw.utils.addClass(body, 'tmap-graph-placeholder');\n\n    }\n\n  }\n\n  /**\n   * The standard way of rendering.\n   * Attention: BE CAREFUL WITH THE ORDER OF FUNCTION CALLS IN THIS FUNCTION.\n   */\n  renderFullWidget(widget, header, body) {\n\n    // add window and widget dom node listeners\n    utils.setDomListeners('add', window, this.windowDomListeners);\n    utils.setDomListeners('add', widget, this.widgetDomListeners);\n\n    // add a loading bar\n    this.addLoadingBar(this.domNode);\n\n    // prepare the tooltip for graph elements\n    this.tooltip = new Popup(this.domNode, {\n      className: 'tmap-tooltip',\n      showDelay: $tm.config.sys.popups.delay\n    });\n\n    // prepare the context menu\n    this.contextMenu = new Popup(this.domNode, {\n      className: 'tmap-context-menu',\n      showDelay: 0,\n      hideOnClick: true,\n      leavingDelay: 999999\n    });\n\n    // register\n    this.sidebar = utils.getFirstElementByClassName('tc-sidebar-scrollable');\n    this.isInSidebar = (this.sidebar\n                                 && !this.domNode.isTiddlyWikiFakeDom\n                                 && this.sidebar.contains(this.domNode));\n\n    // *first* inject the bar\n    this.rebuildEditorBar(header);\n\n    // *second* initialise graph variables and render the graph\n    this.initAndRenderGraph(body);\n\n    // register this graph at the caretaker's graph registry\n    $tm.registry.push(this);\n\n    // if any refresh-triggers exist, register them\n    this.reloadRefreshTriggers();\n\n    // maybe display a welcome message\n    this.checkForFreshInstall();\n\n    if (this.id === $tm.misc.mainEditorId) {\n\n      const url = $tm.url;\n      if (url && url.query['tmap-enlarged']) {\n\n        this.toggleEnlargedMode(url.query['tmap-enlarged']);\n        //~ this.setView(url.query['tmap-view']);\n\n      }\n\n    }\n\n  }\n\n  /**\n   * Add some classes to give the user a chance to apply some css\n   * to different graph modes.\n   */\n  registerClassNames(parent) {\n\n    const addClass = $tw.utils.addClass;\n\n    // add main class\n    addClass(parent, 'tmap-widget');\n\n    if (this.clickToUse) {\n      addClass(parent, 'tmap-click-to-use');\n    }\n\n    if (this.getAttr('editor') === 'advanced') {\n      addClass(parent, 'tmap-advanced-editor');\n    }\n\n    if (this.getAttr('design') === 'plain') {\n      addClass(parent, 'tmap-plain-design');\n    }\n\n    if (!utils.isTrue(this.getAttr('show-buttons'), true)) {\n      addClass(parent, 'tmap-no-buttons');\n    }\n\n    if (this.getAttr('class')) {\n      addClass(parent, this.getAttr('class'));\n    }\n\n  }\n\n  /**\n   * Adds a loading bar div below the parent.\n   */\n  addLoadingBar(parent) {\n\n    this.graphLoadingBarDomNode = this.document.createElement('progress');\n    $tw.utils.addClass(this.graphLoadingBarDomNode, 'tmap-loading-bar');\n    parent.appendChild(this.graphLoadingBarDomNode);\n\n  }\n\n  /**\n   * The editor bar contains a bunch of widgets that allow the user\n   * to manipulate the current view.\n   *\n   * Attention: The Editor bar needs to render *after* the graph\n   * because some elements depend on the graph's nodes which are\n   * calculated when the network is created.\n   *\n   * @see https://groups.google.com/forum/#!topic/tiddlywikidev/sJrblP4A0o4\n   * @see blob/master/editions/test/tiddlers/tests/test-wikitext-parser.js\n   */\n  rebuildEditorBar() {\n\n    this.removeChildDomNodes();\n\n    // register dialog variables\n\n    const { view } = this;\n    const unicodeBtnClass = 'tmap-unicode-button';\n    const activeUnicodeBtnClass = `${unicodeBtnClass} tmap-active-button`;\n    const variables = {\n      widgetQualifier: this.getStateQualifier(),\n      widgetTempPath: this.widgetTempPath,\n      widgetPopupsPath: this.widgetPopupsPath,\n      isViewBound: String(this.isViewBound()),\n      viewRoot: view.getRoot(),\n      viewLabel: view.getLabel(),\n      viewHolder: this.getViewHolderRef(),\n      edgeTypeFilter: view.edgeTypeFilterTRef,\n      allEdgesFilter: $tm.selector.allEdgeTypes,\n      neighScopeBtnClass: view.isEnabled('neighbourhood_scope') ? activeUnicodeBtnClass : unicodeBtnClass,\n      rasterMenuBtnClass: view.isEnabled('raster') ? activeUnicodeBtnClass : unicodeBtnClass,\n    };\n\n    for (let name in variables) {\n      this.setVariable(name, variables[name]);\n    }\n\n    // Construct the child widget tree\n    const body = utils.getTiddlerNode(view.getRoot());\n\n    if (this.editorMode === 'advanced') {\n\n      body.children.push(utils.getTranscludeNode($tm.ref.graphBar));\n\n    } else {\n\n      const el = utils.getElementNode('span', 'tmap-view-label', view.getLabel());\n      body.children.push(el);\n\n    }\n\n    body.children.push(utils.getTranscludeNode($tm.ref.focusButton));\n\n    this.makeChildWidgets([ body ]);\n    this.renderChildren(this.graphBarDomNode, this.graphBarDomNode.firstChild);\n\n  }\n\n  /**\n   * This function is called by the system to notify the widget about\n   * tiddler changes. It is ignored by TiddlyMap.\n   *\n   * ATTENTION: TiddlyMap doesn't use the refresh mechanism here.\n   * The caretaker module dispatches an `updates` object that provides\n   * more advanced information, tailored to the needs of TiddlyMap.\n   * These updates are picked up by {@link MapWidget#update}.\n   *\n   * @override\n   */\n  refresh(changedTiddlers) {\n\n    // TiddlyMap never needs a full refresh so we return false\n    return false;\n\n  }\n\n  /**\n   * This function is called by the caretaker module to notify the\n   * widget about tiddler changes.\n   *\n   * TiddlyMap is interested in the following changes:\n   *\n   * - Callbacks have been triggered (e.g. dialog results)\n   * - A view has been switched\n   * - A view has been modified (= configured)\n   * - Global options have changed\n   * - Node- or edge-types have changed\n   * - Graph elements have changed\n   * - Changes to the graph's topbar\n   *\n   * @override\n   * @see https://groups.google.com/d/msg/tiddlywikidev/hwtX59tKsIk/EWSG9glqCnsJ\n   */\n  update(updates) {\n\n    if (!this.network || this.isZombieWidget() || utils.isPreviewed(this)) {\n      return;\n    }\n\n    const { changedTiddlers } = updates;\n\n    // check for callback changes\n    this.callbackManager.refresh(changedTiddlers);\n\n    if (this.isViewSwitched(changedTiddlers) // use changed view\n       || this.hasChangedAttributes() // widget html code changed\n       || updates[env.path.options] // global options changed\n       || changedTiddlers[this.view.getRoot()] // view's main config changed\n    ) {\n\n      this.logger('warn', 'View switched config changed');\n\n      this.isPreventZoomOnNextUpdate = false;\n      this.view = this.getView(true);\n      this.reloadRefreshTriggers();\n      this.rebuildEditorBar();\n      this.initAndRenderGraph(this.graphDomNode);\n\n    } else { // view has not been switched\n\n      // give the view a chance to refresh itself\n      const isViewUpdated = this.view.update(updates);\n\n      if (isViewUpdated) {\n\n        this.logger('warn', 'View components modified');\n\n        this.rebuildEditorBar();\n        this.reloadBackgroundImage();\n        this.rebuildGraph({ resetFocus: { delay: 1000, duration: 1000 }});\n\n      } else { // neither view switch or view modification\n\n        if (updates[env.path.nodeTypes] || this.hasChangedElements(changedTiddlers)) {\n          this.rebuildGraph();\n        }\n\n        // give children a chance to update themselves\n        this.refreshChildren(changedTiddlers);\n\n      }\n    }\n\n  }\n\n  hidePopups(delay, isForce) {\n\n    this.tooltip.hide(delay, isForce);\n    this.contextMenu.hide(0, true);\n\n  }\n\n  /**\n   * Refresh-triggers are tiddlers whose mere occurrence in the\n   * changedTiddlers list forces tiddlymap to reassert\n   * whether a filter expression returns the same set of matches as it\n   * is currently displayed in the graph.\n   *\n   * The raison d'etre for refresh-triggers is that a filter may contain\n   * implicit text-references or variables that may require a filter to be\n   * reasserted even though, the filter expression itself did not change.\n   *\n   * For example a filter `[field:title{$:/HistoryList!!current-tiddler}]`\n   * requires a `$:/HistoryList` refresh trigger to be added to the view so\n   * everytime the `$:/HistoryList` tiddler changes, the filter gets\n   * reasserted.\n   */\n  reloadRefreshTriggers() {\n\n    // remove old triggers (if there are any)\n    this.callbackManager.remove(this.refreshTriggers);\n\n    // load new trigger list either from attribute or view config\n    const str = this.getAttr('refresh-triggers') || this.view.getConfig('refresh-triggers');\n    this.refreshTriggers = $tw.utils.parseStringArray(str) || [];\n\n    this.logger('debug', 'Registering refresh trigger', this.refreshTriggers);\n\n    // TODO: not nice, if more than one trigger changed it\n    // will cause multiple reassertments\n    for (let i = this.refreshTriggers.length; i--;) {\n      this.callbackManager.add(this.refreshTriggers[i],\n                               this.handleTriggeredRefresh,\n                               false);\n    }\n\n  }\n\n  /**\n   * Calling this method will cause the graph to be rebuild, which means\n   * the graph data is refreshed. A rebuild of the graph will always\n   * cause the network to stabilize again.\n   *\n   * @param {Hashmap} [resetFocus=null] - If not false or null,\n   *     this object requires two properties to be set: `delay` (the\n   *     time to wait before starting the fit), `duration` (the length\n   *     of the fit animation).\n   */\n  rebuildGraph({ resetFocus } = {}) {\n\n    if (utils.isPreviewed(this)) {\n\n      return;\n    }\n\n    this.logger('debug', 'Rebuilding graph');\n\n    this.hidePopups(0, true);\n\n    // always reset to allow handling of stabilized-event!\n    this.hasNetworkStabilized = false;\n\n    const changes = this.rebuildGraphData();\n\n    if (changes.changedNodes.withoutPosition.length) {\n\n      // force resetFocus\n      resetFocus = resetFocus || { delay: 1000, duration: 1000 };\n\n      if (!this.view.isEnabled('physics_mode')) {\n\n        // in static mode we need to ensure that objects spawn\n        // near center so we need to set physics from\n        // zero to something. Yes, we override the users\n        // central gravity value… who cares about central\n        // gravity in static mode anyways.\n        const physics = this.visOptions.physics;\n        physics[physics.solver].centralGravity = 0.25;\n        this.network.setOptions(this.visOptions);\n\n      }\n    }\n\n    if (!utils.hasElements(this.graphData.nodesById)) {\n      return;\n    }\n\n    if (resetFocus) {\n\n      if (!this.isPreventZoomOnNextUpdate) {\n\n        // see https://github.com/almende/vis/issues/987#issuecomment-113226216\n        // see https://github.com/almende/vis/issues/939\n        this.network.stabilize();\n        this.resetFocus = resetFocus;\n      }\n\n      this.isPreventZoomOnNextUpdate = false;\n\n    }\n\n  }\n\n  /**\n   * WARNING: Do not change this functionname as it is used by the\n   * caretaker's routinely checkups.\n   */\n  getContainer() {\n\n    return this.domNode;\n\n  }\n\n  /**\n   *\n   */\n  rebuildGraphData() {\n\n    $tm.start('Reloading Network');\n\n    const graph = $tm.adapter.getGraph({ view: this.view });\n\n    const changedNodes = utils.refreshDataSet(\n      this.graphData.nodes, // dataset\n      graph.nodes // new nodes\n    );\n\n    const changedEdges = utils.refreshDataSet(\n      this.graphData.edges, // dataset\n      graph.edges // new edges\n    );\n\n    // create lookup tables\n\n    this.graphData.nodesById = graph.nodes;\n    this.graphData.edgesById = graph.edges;\n\n    // TODO: that's a performance killer. this should be loaded when\n    // the search is actually used!\n    // update: Careful when refactoring, some modules are using this…\n    utils.setField(`$:/temp/tmap/nodes/${this.view.getLabel()}`, 'list', $tm.adapter.getTiddlersByIds(graph.nodes));\n\n    $tm.stop('Reloading Network');\n\n    return { changedEdges, changedNodes };\n\n  }\n\n  isViewBound() {\n\n    return utils.startsWith(this.getViewHolderRef(), $tm.path.localHolders);\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  isViewSwitched(changedTiddlers) {\n\n    return changedTiddlers[this.getViewHolderRef()];\n\n  }\n\n  /**\n   * A view is switched, if the holder was changed.\n   */\n  hasChangedAttributes() {\n\n    return Object.keys(this.computeAttributes()).length;\n\n  }\n\n  /**\n   * Rebuild or update the graph if one of the following is true:\n   *\n   * 1. A tiddler currently contained as node in the graph has been\n   *    deleted or modified. This also includes tiddlers that are\n   *    represented as neighbours in the graph.\n   * 2. The neighbourhood is shown and a non-system tiddler has changed.\n   * 3. A tiddler that matches the node filter has been modified\n   *    (not deleted).\n   *\n   * Since edges are stored in tiddlers themselves, any edge modification\n   * is always accounted for as in this case the tiddler holding the\n   * edge would be included as changed tiddler.\n   *\n   * @param {Hashmap<TiddlerReference, *>} changedTiddlers - A list of\n   *     tiddler changes.\n   *\n   * @return {boolean} true if the graph needs a refresh.\n   */\n  hasChangedElements(changedTiddlers) {\n\n    const maybeMatches = [];\n    const inGraph = this.graphData.nodesById;\n    const isShowNeighbourhood = this.view.isEnabled('neighbourhood_scope');\n\n    for (let tRef in changedTiddlers) {\n\n      if (utils.isSystemOrDraft(tRef)) {\n\n        continue;\n      }\n\n      if (inGraph[$tm.adapter.getId(tRef)] || isShowNeighbourhood) {\n\n        return true;\n      }\n\n      if (changedTiddlers[tRef].modified) {\n        // may be a match so we store this and process it later\n        maybeMatches.push(tRef);\n      }\n    }\n\n    if (maybeMatches.length) {\n\n      const nodeFilter = this.view.getNodeFilter('compiled');\n      const matches = utils.getMatches(nodeFilter, maybeMatches);\n\n      return !!matches.length;\n    }\n\n  }\n\n  /**\n   * Rebuild the graph\n   *\n   * @see http://visjs.org/docs/network.html\n   * @see http://visjs.org/docs/dataset.html\n   */\n  initAndRenderGraph(parent) {\n\n    // make sure to destroy any previous instance\n    if (this.network) {\n      this._destructVis();\n    }\n\n    this.logger('info', 'Initializing and rendering the graph');\n\n    if (!this.isInSidebar) {\n      this.callbackManager.add('$:/state/sidebar', this.handleResizeEvent);\n    }\n\n    this.visOptions = this.getVisOptions();\n\n    this.graphData = {\n      nodes: new vis.DataSet(),\n      edges: new vis.DataSet(),\n      nodesById: utils.makeHashMap(),\n      edgesById: utils.makeHashMap()\n    };\n\n    this.tooltip.setEnabled(utils.isTrue($tm.config.sys.popups.enabled, true));\n\n    this.network = new vis.Network(parent, this.graphData, this.visOptions);\n    // after vis.Network has been instantiated, we fetch a reference to\n    // the canvas element\n    this.canvas = parent.getElementsByTagName('canvas')[0];\n    this.networkDomNode = utils.getFirstElementByClassName('vis-network', parent, true);\n    // just to be sure\n    this.canvas.tabIndex = 0;\n\n    for (let event in this.visListeners) {\n      this.network.on(event, this.visListeners[event].bind(this));\n    }\n\n    this.addGraphButtons({\n      'fullscreen-button': () => { this.toggleEnlargedMode('fullscreen'); },\n      'halfscreen-button': () => { this.toggleEnlargedMode('halfscreen'); }\n    });\n\n    utils.setDomListeners('add', this.canvas, this.canvasDomListeners);\n\n    this.reloadBackgroundImage();\n    this.rebuildGraph({\n      resetFocus: { delay: 0, duration: 0 },\n    });\n    this.handleResizeEvent();\n    this.canvas.focus();\n\n  }\n\n  handleCanvasKeyup(ev) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    // this.isCtrlKeyDown = ev.ctrlKey;\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 88) { // x\n        if (this.editorMode) {\n          this.handleAddNodesToClipboard('move');\n        } else {\n          $tm.notify('Map is read only!');\n        }\n\n      } else if (ev.keyCode === 67) { // c\n        this.handleAddNodesToClipboard('copy');\n\n      } else if (ev.keyCode === 86) { // v\n        this.handlePasteNodesFromClipboard();\n\n      } else if (ev.keyCode === 65) { // a\n        const allNodes = Object.keys(this.graphData.nodesById);\n        this.network.selectNodes(allNodes);\n\n      } else if (ev.keyCode === 49 || ev.keyCode === 50) { // 1 || 2\n        if (nodeIds.length !== 1) return;\n\n        const role = ev.keyCode === 49 ? 'from' : 'to';\n        $tm.notify(utils.ucFirst(role) + '-part selected');\n\n        this.conVector[role] = nodeIds[0];\n        if (this.conVector.from && this.conVector.to) {\n          // create the edge\n          this.handleConnectionEvent(this.conVector, () => {\n            // reset both properties, regardless whether confirmed\n            this.conVector = { from: null, to: null };\n          });\n        }\n\n      }\n\n    } else { // ctrl is not pressed\n\n      if (ev.keyCode === 13) { // ENTER\n\n        if (nodeIds.length !== 1) return;\n\n        this.openTiddlerWithId(nodeIds[0]);\n\n      }\n    }\n  }\n\n  handleCanvasKeydown(ev) {\n\n    if (ev.keyCode === 46) { // delete\n      ev.preventDefault();\n      this.handleRemoveElements(this.network.getSelection());\n    }\n\n  }\n\n  handleDeleteElement(ev) {\n\n    const id = ev.paramObject.id;\n    const elements = (id ? [ id ] : this.network.getSelectedNodes());\n\n    this.handleRemoveElements({ nodes: elements });\n\n  }\n\n  /**\n   *\n   * @param ev\n   */\n  handleCanvasMouseMove(ev) {\n\n    const { network } = this;\n\n    if (!(ev.ctrlKey && ev.buttons)) {\n\n      if (this.selectRect) {\n        this.selectRect = null;\n        const selectedNodes = network.getSelectedNodes();\n        $tm.notify(`${selectedNodes.length} nodes selected`);\n        network.redraw();\n      }\n\n      return;\n\n    }\n\n    // prevent vis' network drag if ctrl key and mouse button is pressed\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (!this.domNode.contains(ev.target)) {\n      // since we are using a global mouse listener, we need to check whether\n      // we are actually inside our widget, so we stop updating the selectRect\n      return;\n    }\n\n    const mouse = network.DOMtoCanvas({ x: ev.offsetX, y: ev.offsetY });\n\n    if (!this.selectRect) {\n      this.selectRect = new SelectionRectangle(mouse.x, mouse.y);\n    }\n\n    // register new coordinates\n    this.selectRect.span(mouse.x, mouse.y);\n    // retrieve current mouse positions\n    const nodePositions = network.getPositions();\n    // we include previously selected nodes in the new set\n    const selectedNodes = network.getSelectedNodes();\n\n    for (let id in nodePositions) {\n\n      if (this.selectRect.isPointWithin(nodePositions[id]) && !utils.inArray(id, selectedNodes)) {\n        selectedNodes.push(id);\n      }\n    }\n\n    network.selectNodes(selectedNodes);\n    this.assignActiveStyle(selectedNodes);\n\n    network.redraw();\n\n  }\n\n  //https://github.com/almende/vis/blob/111c9984bc4c1870d42ca96b45d90c13cb92fe0a/lib/network/modules/InteractionHandler.js\n  handleCanvasScroll(ev) {\n\n    const isZoomAllowed = !!(\n      this.isInSidebar || // e.g. the map editor in the sidebar\n      ev.ctrlKey ||\n      this.enlargedMode ||\n      (this.clickToUse && this.networkDomNode.classList.contains('vis-active'))\n    );\n\n    const { interaction } = this.visOptions;\n    const isVisSettingInSync = isZoomAllowed === interaction.zoomView;\n\n    if (isZoomAllowed || !isVisSettingInSync) {\n      ev.preventDefault();\n    }\n\n    if (!isVisSettingInSync) {\n      // prevent visjs from reacting to this event as we first need to sync states\n      ev.stopPropagation();\n\n      interaction.zoomView = isZoomAllowed;\n      this.network.setOptions({ interaction: { zoomView: isZoomAllowed }});\n\n      return false;\n    }\n\n  }\n\n  /**\n   * Called when the user click on the canvas with the right\n   * mouse button. A context menu is opened.\n   */\n  handleContextMenu(ev) {\n\n    ev.preventDefault();\n\n    const { network } = this;\n\n    this.hidePopups(0, true);\n\n    const nodeId = network.getNodeAt({ x: ev.offsetX, y: ev.offsetY });\n    if (!nodeId) return;\n\n    // ids of selected nodes\n    let selectedNodes = network.getSelectedNodes();\n\n    if (!utils.inArray(nodeId, selectedNodes)) {\n      // unselect other nodes and select this one instead…\n      selectedNodes = [ nodeId ];\n      network.selectNodes(selectedNodes);\n    }\n\n    this.contextMenu.show(selectedNodes, (selectedNodes, div) => {\n\n      const mode = (selectedNodes.length > 1 ? 'multi' : 'single');\n      const tRef = '$:/plugins/felixhayashi/tiddlymap/editor/contextMenu/node';\n\n      utils.registerTransclude(this, 'contextMenuWidget', tRef);\n      this.contextMenuWidget.setVariable('mode', mode);\n      this.contextMenuWidget.render(div);\n\n    });\n\n  }\n\n  handleWidgetKeyup(ev) {\n\n  }\n\n  handleWidgetKeydown(ev) {\n\n    if (ev.ctrlKey) { // ctrl key is hold down\n      ev.preventDefault();\n\n      if (ev.keyCode === 70) { // f\n        ev.preventDefault();\n\n        const focusButtonStateTRef = `${this.widgetPopupsPath}/focus`;\n        utils.setText(focusButtonStateTRef, utils.getText(focusButtonStateTRef) ? '' : '1');\n\n        // note: it is ok to focus the graph right after this,\n        // if the focus button is activated it will steal the focus anyway\n\n      } else {\n\n        return;\n\n      }\n\n    } else if (ev.keyCode === 120) { // F9\n      ev.preventDefault();\n      this.toggleEnlargedMode('halfscreen');\n\n    } else if (ev.keyCode === 121) { // F10\n      ev.preventDefault();\n      this.toggleEnlargedMode('fullscreen');\n\n    } else if (ev.keyCode === 27) { // ESC\n      ev.preventDefault();\n\n      utils.deleteByPrefix(this.widgetPopupsPath);\n\n    } else {\n      return;\n    }\n\n    this.canvas.focus();\n\n  }\n\n  handlePasteNodesFromClipboard() {\n\n    if (!this.editorMode || this.view.isLiveView()) {\n      $tm.notify('Map is read only!');\n      return;\n    }\n\n    if (!$tm.clipBoard || $tm.clipBoard.type !== 'nodes') {\n      $tm.notify('TiddlyMap clipboad is empty!');\n    }\n\n    const nodes = $tm.clipBoard.nodes;\n    const ids = Object.keys(nodes);\n\n    for (let i = ids.length; i--;) {\n\n      const id = ids[i];\n\n      if (this.graphData.nodesById[id]) {\n        // node already present in this view\n        continue;\n      }\n\n      this.view.addNode(nodes[id]);\n\n      // paste nodes so we can select them!\n      this.graphData.nodes.update({ id });\n    }\n\n    this.network.selectNodes(ids);\n\n    this.rebuildGraph({ resetFocus: { delay: 0, duration: 0 }});\n\n    $tm.notify(`pasted ${ids.length} nodes into map.`);\n\n  }\n\n  handleAddNodesToClipboard(mode) {\n\n    const nodeIds = this.network.getSelectedNodes();\n\n    if (!nodeIds.length) {\n      return;\n    }\n\n    $tm.clipBoard = {\n      type: 'nodes',\n      nodes: this.graphData.nodes.get(nodeIds, { returnType: 'Object' })\n    };\n\n    $tm.notify(`Copied ${nodeIds.length} nodes to clipboard`);\n\n    if (mode === 'move') {\n      for (let i = nodeIds.length; i--;) {\n        this.view.removeNode(nodeIds[i]);\n      }\n    }\n\n    // prevent zoom\n    this.isPreventZoomOnNextUpdate = true;\n\n  }\n\n  /**\n   * @todo Instead of redrawing the whole graph when an edge or node is\n   * added it may be worth considering only getting the element from the\n   * adapter and directly inserting it into the graph and *avoid* a\n   * reload of the graph via `rebuildGraph`!\n   *\n   * @todo: too much recomputation -> outsource\n   */\n  getVisOptions() {\n\n    // merge options\n    const globalOptions = $tm.config.vis;\n    const localOptions = utils.parseJSON(this.view.getConfig('vis'));\n    const options = utils.merge({}, globalOptions, localOptions);\n\n    options.clickToUse = this.clickToUse;\n    options.manipulation.enabled = !!this.editorMode;\n\n    options.manipulation.deleteNode = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.deleteEdge = (data, callback) => {\n      this.handleRemoveElements(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addEdge = (data, callback) => {\n      this.handleConnectionEvent(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.addNode = (data, callback) => {\n      this.handleInsertNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.manipulation.editNode = (data, callback) => {\n      this.handleEditNode(data);\n      this.resetVisManipulationBar(callback);\n    };\n\n    options.interaction.zoomView = !!(this.isInSidebar || this.enlargedMode);\n\n    // not allowed\n    options.manipulation.editEdge = false;\n\n    // make sure the actual solver is an object\n    const physics = options.physics;\n    physics[physics.solver] = physics[physics.solver] || {};\n\n    physics.stabilization.iterations = 1000;\n\n    this.logger('debug', 'Loaded graph options', options);\n\n    return options;\n\n  }\n\n  resetVisManipulationBar(visCallback) {\n\n    if (visCallback) {\n      visCallback(null);\n    }\n\n    this.network.disableEditMode();\n    this.network.enableEditMode();\n\n  }\n\n  isVisInEditMode() {\n\n    return this.graphDomNode.getElementsByClassName('vis-button vis-back').length > 0;\n\n  }\n\n  /**\n   * Create an empty view. A dialog is opened that asks the user how to\n   * name the view. The view is then registered as current view.\n   */\n  handleCreateView() {\n\n    const args = {\n      view: this.view.getLabel()\n    };\n\n    $tm.dialogManager.open('createView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const label = utils.getField(outTObj, 'name');\n      const isClone = utils.getField(outTObj, 'clone', false);\n\n      if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n        return;\n      }\n\n      if (isClone && this.view.isLiveView()) {\n        $tm.notify('Forbidden to clone the live view!');\n        return;\n      }\n\n      const newView = new ViewAbstraction(label, {\n        isCreate: true,\n        protoView: (isClone ? this.view : null)\n      });\n\n      this.setView(newView);\n\n    });\n\n  }\n\n  handleRenameView() {\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    const references = this.view.getOccurrences();\n\n    const args = {\n      count: references.length.toString(),\n      refFilter: utils.joinAndWrap(references, '[[', ']]')\n    };\n\n    $tm.dialogManager.open('renameView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n\n        return;\n      }\n\n      const label = utils.getText(outTObj);\n\n      if (!label) {\n\n        $tm.notify('Invalid name!');\n\n      } else if (ViewAbstraction.exists(label)) {\n\n        $tm.notify('Forbidden! View already exists!');\n\n      } else {\n\n        this.view.rename(label);\n        this.setView(this.view);\n\n      }\n    });\n  }\n\n  handleEditView() {\n\n    const visInherited = JSON.stringify($tm.config.vis);\n    const data = this.graphData;\n\n    const viewConfig = this.view.getConfig();\n\n    const preselects = {\n      'filter.prettyNodeFltr': this.view.getNodeFilter('pretty'),\n      'filter.prettyEdgeFltr': this.view.getEdgeTypeFilter('pretty'),\n      'vis-inherited': visInherited\n    };\n\n    const args = {\n      view: this.view.getLabel(),\n      createdOn: this.view.getCreationDate(true),\n      numberOfNodes: Object.keys(data.nodesById).length.toString(),\n      numberOfEdges: Object.keys(data.edgesById).length.toString(),\n      dialog: {\n        preselects: $tw.utils.extend({}, viewConfig, preselects)\n      }\n    };\n\n    $tm.dialogManager.open('configureView', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      const config = utils.getPropertiesByPrefix(outTObj.fields, 'config.', true);\n\n      // ATTENTION: needs to be tested before applying new config!\n      const prvBg = this.view.getConfig('background_image');\n\n      this.view.setConfig(config);\n      if (config['physics_mode'] && !this.view.isEnabled('physics_mode')) {\n        // when not in physics mode, store positions\n        // to prevent floating afterwards\n        this.view.saveNodePositions(this.network.getPositions());\n      }\n\n      const curBg = this.view.getConfig('background_image');\n      if (curBg && curBg !== prvBg) {\n        $tm.notify('Background changed! You may need to zoom out a bit.');\n      }\n\n      const nf = utils.getField(outTObj, 'filter.prettyNodeFltr', '');\n      const eTf = utils.getField(outTObj, 'filter.prettyEdgeFltr', '');\n\n      this.view.setNodeFilter(nf);\n      this.view.setEdgeTypeFilter(eTf);\n\n    });\n  }\n\n  /**\n   * Triggers a download dialog where the user can store the canvas\n   * as png on his/her harddrive.\n   */\n  handleSaveCanvas() {\n\n    const tempImagePath = '$:/temp/tmap/snapshot';\n    this.createAndSaveSnapshot(tempImagePath);\n    let defaultName = utils.getSnapshotTitle(this.view.getLabel(), 'png');\n\n    const args = {\n      dialog: {\n        snapshot: tempImagePath,\n        width: this.canvas.width.toString(),\n        height: this.canvas.height.toString(),\n        preselects: {\n          name: defaultName,\n          action: 'download'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('saveCanvas', args, (isConfirmed, outTObj) => {\n      if (!isConfirmed) return;\n\n      // allow the user to override the default name or if name is\n      // empty use the original default name\n      defaultName = outTObj.fields.name || defaultName;\n\n      const action = outTObj.fields.action;\n\n      if (action === 'download') {\n        this.handleDownloadSnapshot(defaultName);\n\n      } else if (action === 'wiki') {\n        utils.cp(tempImagePath, defaultName, true);\n        this.dispatchEvent({\n          type: 'tm-navigate', navigateTo: defaultName\n        });\n\n      } else if (action === 'placeholder') {\n        this.view.addPlaceholder(tempImagePath);\n\n      }\n\n      // in any case\n      $tw.wiki.deleteTiddler('$:/temp/tmap/snapshot');\n\n    });\n\n  }\n\n  handleDownloadSnapshot(title) {\n\n    const a = this.document.createElement('a');\n    const label = this.view.getLabel();\n    a.download = title || utils.getSnapshotTitle(label, 'png');\n    a.href = this.getSnapshot();\n\n    // we cannot simply call click() on <a>; chrome is cool with it but\n    // firefox requires us to create a mouse event…\n    const event = new MouseEvent('click');\n    a.dispatchEvent(event);\n\n  }\n\n  createAndSaveSnapshot(title) {\n\n    const tRef = title || this.view.getRoot() + '/snapshot';\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title: tRef,\n      type: 'image/png',\n      text: this.getSnapshot(true),\n      modified: new Date()\n    }));\n\n    return tRef;\n\n  }\n\n  getSnapshot(stripPreamble) {\n\n    const data = this.canvas.toDataURL('image/png');\n\n    return (stripPreamble\n            ? utils.getWithoutPrefix(data, 'data:image/png;base64,')\n            : data);\n\n  }\n\n  handleDeleteView() {\n\n    const viewname = this.view.getLabel();\n\n    if (this.view.isLocked()) {\n\n      $tm.notify('Forbidden!');\n      return;\n\n    }\n\n    // regex is non-greedy\n\n    const references = this.view.getOccurrences();\n    if (references.length) {\n\n      const fields = {\n        count: references.length.toString(),\n        refFilter: utils.joinAndWrap(references, '[[', ']]')\n      };\n\n      $tm.dialogManager.open('cannotDeleteViewDialog', fields);\n\n      return;\n\n    }\n\n    const message = `\n        You are about to delete the view ''${viewname}''\n        (no tiddler currently references this view).\n     `;\n\n    this.openStandardConfirmDialog((isConfirmed) => { // TODO: this dialog needs an update\n\n      if (!isConfirmed) {\n        return;\n      }\n\n      this.view.destroy();\n      this.setView($tm.misc.defaultViewLabel);\n      const msg = `view \"${viewname}' deleted`;\n      this.logger('debug', msg);\n      $tm.notify(msg);\n\n\n    }, message);\n\n  }\n\n  /**\n   * This will rebuild the graph after a trigger has been activated.\n   *\n   * Prior to TiddlyMap v0.9, an additional check was performed\n   * to verify, if the graph had actually changed before rebuilding\n   * the graph. This check, however, was an overkill and as such removed.\n   */\n  handleTriggeredRefresh(trigger) {\n\n    this.logger('log', trigger, 'Triggered a refresh');\n\n    // special case for the live tab\n    if (this.id === 'live_tab') {\n      const curTiddler = utils.getTiddler(utils.getText(trigger));\n      if (curTiddler) {\n        const view = (curTiddler.fields['tmap.open-view'] || $tm.config.sys.liveTab.fallbackView);\n        if (view && view !== this.view.getLabel()) {\n          this.setView(view);\n          return;\n        }\n      }\n    }\n\n    this.rebuildGraph({\n      resetFocus: {\n        delay: 1000,\n        duration: 1000\n      },\n    });\n\n  }\n\n  /**\n   * Called by vis when the user tries to delete nodes or edges.\n   * The action is delegated to subhandlers.\n   *\n   * @param {Array<Id>} nodes - Removed edges.\n   * @param {Array<Id>} edges - Removed nodes.\n   */\n  handleRemoveElements({ nodes, edges }) {\n\n    if (nodes.length) {\n      // the adapter also removes edges when nodes are removed.\n      this.handleRemoveNodes(nodes);\n\n    } else if (edges.length) {\n      this.handleRemoveEdges(edges);\n\n    }\n\n    this.resetVisManipulationBar();\n\n\n  }\n\n  handleRemoveEdges(edgeIds) {\n\n    $tm.adapter.deleteEdges(this.graphData.edges.get(edgeIds));\n    $tm.notify('edge' + (edgeIds.length > 1 ? 's' : '') + ' removed');\n\n  }\n\n\n  /**\n   * Handler that guides the user through the process of deleting a node\n   * from the graph. The nodes may be removed from the filter (if possible)\n   * or from the system.\n   *\n   * Note: this should not trigger a zoom.\n   */\n  handleRemoveNodes(nodeIds) {\n\n    const tiddlers = $tm.adapter.getTiddlersByIds(nodeIds);\n    const params = {\n      'count': nodeIds.length.toString(),\n      'tiddlers': $tw.utils.stringifyList(tiddlers),\n      dialog: {\n        preselects: {\n          'delete-from': 'filter'\n        }\n      }\n    };\n\n    $tm.dialogManager.open('deleteNodeDialog', params, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      let deletionCount = 0;\n\n      for (let i = nodeIds.length; i--;) {\n        const success = this.view.removeNode(nodeIds[i]);\n        if (success) {\n          deletionCount++;\n        }\n      }\n\n      if (outTObj.fields['delete-from'] === 'system') {\n\n        // will also delete edges\n        $tm.adapter.deleteNodes(nodeIds);\n        deletionCount = nodeIds.length; // we just say so ;)\n\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n      $tm.notify(`\n        Removed ${deletionCount}\n        of ${nodeIds.length}\n        from ${outTObj.fields['delete-from']}\n      `);\n\n    });\n\n  }\n\n  /**\n   * Calling this function will toggle the enlargement of the map\n   * instance. Markers need to be added at various places to ensure the\n   * map stretches properly. This includes marking ancestor dom nodes\n   * to be able to shift the stacking context.\n   *\n   * @param {string} type - either 'halfscreen' or 'fullscreen'.\n   */\n\n  toggleEnlargedMode(type) {\n\n    if (!this.isInSidebar && type === 'halfscreen') {\n      return;\n    }\n\n    this.logger('log', 'Toggled graph enlargement');\n\n    const enlargedMode = this.enlargedMode;\n\n    // in any case, exit enlarged mode if active\n    if (enlargedMode) {\n\n      // reset click to use\n      this.network.setOptions({ clickToUse: this.clickToUse });\n\n      // remove markers\n      utils.findAndRemoveClassNames([\n        `tmap-has-${enlargedMode}-widget`,\n        `tmap-${enlargedMode}`\n      ]);\n\n      // reset flag\n      this.enlargedMode = null;\n      document.body.scrollTop = this.scrollTop;\n    }\n\n    if (!enlargedMode\n       || (enlargedMode !== type\n           && (type === 'fullscreen'\n               || (type === 'halfscreen' && !this.isInSidebar)))) {\n\n      this.scrollTop = document.body.scrollTop;\n\n      this.enlargedMode = type;\n\n      const pContainer = (this.isInSidebar\n                        ? this.sidebar\n                        : utils.getFirstElementByClassName('tc-story-river'));\n\n      $tw.utils.addClass(this.document.body, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(pContainer, `tmap-has-${type}-widget`);\n      $tw.utils.addClass(this.domNode, `tmap-${type}`);\n\n      // disable click to use by force\n      this.network.setOptions({ clickToUse: false });\n\n      $tm.notify(`Toggled ${type} mode`);\n\n    }\n\n    // always do resize\n    this.handleResizeEvent();\n\n  }\n\n  handleGenerateWidget(event) {\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-generate-widget',\n      paramObject: { view: this.view.getLabel() }\n    });\n\n  }\n\n  handleSetCentralTopic({ paramObject }) {\n\n    let nodeId = paramObject.id || this.network.getSelectedNodes()[0];\n\n    if (nodeId === this.view.getConfig('central-topic')) {\n      nodeId = '';\n    }\n\n    this.view.setCentralTopic(nodeId);\n\n  }\n\n  /**\n   * Called by vis when the graph has stabilized itself.\n   *\n   * ATTENTION: never store positions in a view's map during stabilize\n   * as this will affect other graphs positions and will cause recursion!\n   * Storing positions inside vis' nodes is fine though\n   */\n  handleVisStabilizedEvent(properties) {\n\n    if (this.hasNetworkStabilized) {\n      return;\n    }\n\n    this.hasNetworkStabilized = true;\n    this.logger('log', 'Network stabilized after', properties.iterations, 'iterations');\n\n    if (!this.view.isEnabled('physics_mode')) { // static mode\n\n      // store positions if new nodes without position were added\n      const nodes = this.graphData.nodesById;\n      const idsOfNodesWithoutPosition = [];\n\n      for (let id in nodes) {\n        if (nodes[id].x === undefined) {\n          idsOfNodesWithoutPosition.push(id);\n        }\n      }\n\n      if (idsOfNodesWithoutPosition.length) {\n        this.setNodesMoveable(idsOfNodesWithoutPosition, false);\n        $tm.notify(`${idsOfNodesWithoutPosition.length} nodes were added to the graph`);\n      }\n\n      // after storing positions, set gravity to zero again\n      const physics = this.visOptions.physics;\n      physics[physics.solver].centralGravity = 0;\n      this.network.setOptions(this.visOptions);\n\n    }\n\n    if (this.resetFocus) {\n      this.fitGraph(this.resetFocus.delay, this.resetFocus.duration);\n      this.resetFocus = null;\n    }\n\n  }\n\n  /**\n   * Zooms on a specific node in the graph\n   */\n  handleFocusNode({ param: tRef }) {\n\n    this.network.focus($tm.adapter.getId(tRef), {\n      scale: 1.5,\n      animation: true\n    });\n\n  }\n\n  /**\n   * A zombie widget is a widget that is removed from the dom tree\n   * but still referenced or still partly executed -- I mean\n   * otherwise you couldn't call this function, right?\n   *\n   * If TiddlyMap is executed in a fake environment, the function\n   * always returns true.\n   */\n  isZombieWidget() {\n\n    return this.domNode.isTiddlyWikiFakeDom === true\n           || !this.document.body.contains(this.getContainer());\n\n  }\n\n  /**\n   * This method allows us to specify after what time and for how long\n   * the zoom-to-fit process should be executed for a graph.\n   *\n   * @param {number} [delay=0] - How long to wait before starting to zoom.\n   * @param {number} [duration=0] - After the delay, how long should it\n   *     take for the graph to be zoomed.\n   */\n  fitGraph(delay = 0, duration = 0) {\n\n    // clear any existing fitting attempt\n    clearTimeout(this.activeFitTimeout);\n\n    const fit = () => {\n\n      // happens when widget is removed after stabilize but before fit\n      if (this.isZombieWidget()) {\n        return;\n      }\n\n      // fixes #97\n      this.network.redraw();\n\n      this.network.fit({ // v4: formerly zoomExtent\n        animation: {\n          duration: duration,\n          easingFunction: 'easeOutQuart'\n        }\n      });\n\n    };\n\n    this.activeFitTimeout = setTimeout(fit, delay);\n\n  }\n\n  /**\n   * Spawns a dialog in which the user can specify node attributes.\n   * Once the dialog is closed, the node is inserted into the current\n   * view, unless the operation was cancelled.\n   */\n  handleInsertNode(node) {\n\n    $tm.dialogManager.open('addNodeToMap', {}, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) {\n\n        return;\n      }\n\n      const tRef = utils.getField(outTObj, 'draft.title');\n\n      if (utils.tiddlerExists(tRef)) {\n\n        // Todo: use graphData and test if node is match (!=neighbour)\n        if (utils.isMatch(tRef, this.view.getNodeFilter('compiled'))) {\n\n          $tm.notify('Node already exists');\n\n          return;\n\n        } else {\n\n          node = $tm.adapter.makeNode(tRef, node);\n          this.view.addNode(node);\n\n        }\n\n      } else {\n\n        const tObj = new $tw.Tiddler(outTObj, { 'draft.title': null });\n\n        node.label = tRef;\n        $tm.adapter.insertNode(node, this.view, tObj);\n      }\n\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * Open the node editor to style the node.\n   */\n  handleEditNode(node) {\n\n    const tRef = $tm.tracker.getTiddlerById(node.id);\n    const tObj = utils.getTiddler(tRef);\n    const globalDefaults = JSON.stringify($tm.config.vis);\n    const localDefaults = this.view.getConfig('vis');\n    const nodes = {};\n    nodes[node.id] = node;\n    const nodeStylesByTRef = $tm.adapter.getInheritedNodeStyles(nodes);\n    const groupStyles = JSON.stringify(nodeStylesByTRef[tRef]);\n    const globalNodeStyle = JSON.stringify(utils.merge(\n                            {},\n                            { color: tObj.fields['color'] },\n                            utils.parseJSON(tObj.fields['tmap.style'])));\n\n    const viewLabel = this.view.getLabel();\n\n    // we do not used the cashed version since we need a new object!\n    const nodeData = this.view.getNodeData(node.id, true) || {};\n    // we need to delete the positions so they are not reset when a user\n    // resets the style…\n    delete nodeData.x;\n    delete nodeData.y;\n\n    const args = {\n      'view': viewLabel,\n      'tiddler': tObj.fields.title,\n      'tidColor': tObj.fields['color'],\n      'tidIcon': tObj.fields[$tm.field.nodeIcon] || tObj.fields['tmap.fa-icon'],\n      'tidLabelField': `global.${$tm.field.nodeLabel}`,\n      'tidIconField': `global.${$tm.field.nodeIcon}`,\n      dialog: {\n        preselects: {\n          'inherited-global-default-style': globalDefaults,\n          'inherited-local-default-style': localDefaults,\n          'inherited-group-styles': groupStyles,\n          'global.tmap.style': globalNodeStyle,\n          'local-node-style': JSON.stringify(nodeData)\n        }\n      }\n    };\n\n    // function to iterate over attributes that shall be available\n    // in the dialog.\n    const addToPreselects = (scope, store, keys) => {\n      for (let i = keys.length; i--;) {\n        args.dialog.preselects[scope + '.' + keys[i]] = store[keys[i]] || '';\n      }\n    };\n\n    // local values are retrieved from the view's node data store\n    addToPreselects('local', nodeData, [\n      'label', 'tw-icon', 'fa-icon', 'open-view'\n    ]);\n\n    // global values are taken from the tiddler's field object\n    addToPreselects('global', tObj.fields, [\n      $tm.field.nodeLabel,\n      $tm.field.nodeIcon,\n      'tmap.fa-icon',\n      'tmap.open-view'\n    ]);\n\n    $tm.dialogManager.open('editNode', args, (isConfirmed, outTObj) => {\n\n      if (!isConfirmed) return;\n\n      const fields = outTObj.fields;\n\n      // save or remove global individual style\n      const global = utils.getPropertiesByPrefix(fields, 'global.', true);\n      for (let p in global) {\n\n        utils.setField(tRef, p, global[p] || undefined);\n      }\n\n      // save local individual data (style + config)\n      const local = utils.getPropertiesByPrefix(fields, 'local.', true);\n\n      // CAREFUL: Never change 'local-node-style' to 'local.node-style'\n      // (with a dot) because it will get included in the loop!\n      const data = utils.parseJSON(fields['local-node-style'], {});\n\n      for (let p in local) {\n        data[p] = local[p] || undefined;\n      }\n\n      this.view.saveNodeStyle(node.id, data);\n\n      this.isPreventZoomOnNextUpdate = true;\n\n    });\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   */\n  handleVisSingleClickEvent(properties) {\n\n    const isActivated = utils.isTrue($tm.config.sys.singleClickMode);\n    if (isActivated && !this.editorMode) {\n      this.handleOpenMapElementEvent(properties);\n    }\n\n  }\n\n  /**\n   * This handler is registered at and called by the vis network event\n   * system.\n   *\n   * @see Coordinates not passed on click/tap events within the properties object\n   * @see https://github.com/almende/vis/issues/440\n   *\n   * @properties a list of nodes and/or edges that correspond to the\n   * click event.\n   */\n  handleVisDoubleClickEvent(properties) {\n\n    if (properties.nodes.length || properties.edges.length) {\n\n      if (this.editorMode || !utils.isTrue($tm.config.sys.singleClickMode)) {\n\n        this.handleOpenMapElementEvent(properties);\n\n      }\n\n\n    } else { // = clicked on an empty spot\n\n      if (this.editorMode) {\n        this.handleInsertNode(properties.pointer.canvas);\n      }\n\n    }\n\n  }\n\n  handleOpenMapElementEvent({ nodes, edges }) {\n\n    if (nodes.length) { // clicked on a node\n\n      const node = this.graphData.nodesById[nodes[0]];\n      if (node['open-view']) {\n        $tm.notify('Switching view');\n        this.setView(node['open-view']);\n      } else {\n        this.openTiddlerWithId(nodes[0]);\n      }\n\n    } else if (edges.length) { // clicked on an edge\n\n      this.logger('debug', 'Clicked on an Edge');\n      const typeId = this.graphData.edgesById[edges[0]].type;\n      this.handleEditEdgeType(typeId);\n\n    } else {\n\n      return;\n\n    }\n\n    this.hidePopups(0, true);\n\n  }\n\n  handleEditEdgeType(type) {\n\n    if (!this.editorMode) return;\n\n    const behaviour = $tm.config.sys.edgeClickBehaviour;\n    if (behaviour !== 'manager') return;\n\n    $tw.rootWidget.dispatchEvent({\n      type: 'tmap:tm-manage-edge-types',\n      paramObject: {\n        type: type\n      }\n    });\n\n  };\n\n  /**\n   * Listener will be removed if the parent is not part of the dom anymore\n   *\n   * @see https://groups.google.com/d/topic/tiddlywikidev/yuQB1KwlKx8/discussion [TW5] Is there a destructor for widgets?\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\n   */\n  handleResizeEvent(event) {\n\n    if (this.isZombieWidget()) return;\n\n    let height = this.getAttr('height');\n    let width = this.getAttr('width');\n\n    if (this.isInSidebar) {\n\n      const rect = this.domNode.getBoundingClientRect();\n      const distRight = 15;\n      width = (document.body.clientWidth - rect.left - distRight) + 'px';\n\n      const distBottom = parseInt(this.getAttr('bottom-spacing')) || 15;\n      const calculatedHeight = window.innerHeight - rect.top;\n      height = (calculatedHeight - distBottom) + 'px';\n\n    }\n\n    this.domNode.style.height = height || '300px';\n    this.domNode.style.width = width;\n\n    this.repaintGraph(); // redraw graph\n\n  }\n\n  /**\n   * used to prevent nasty deletion as edges are not unselected when leaving vis\n   */\n  handleClickEvent(evt) {\n\n    if (this.isZombieWidget() || !this.network) return;\n\n    if (!this.graphDomNode.contains(evt.target)) { // clicked outside\n\n      const selected = this.network.getSelection();\n      if (selected.nodes.length || selected.edges.length) {\n        this.logger('debug', 'Clicked outside; deselecting nodes/edges');\n        // upstream bug: this.network.unselectAll() doesn't work\n        this.network.selectNodes([]); // deselect nodes and edges\n        this.resetVisManipulationBar();\n      }\n\n    } else {\n\n      this.canvas.focus();\n\n    }\n\n    if (evt.button !== 2) { // not the right button\n      this.contextMenu.hide(0, true);\n    }\n\n  }\n\n  handleVisSelectNode({ nodes }) {\n\n    // assign selected style\n    this.assignActiveStyle(nodes);\n\n  }\n\n  /**\n   * Assign some styles when the graph element becomes active, i.e.\n   * it is selected or hovered over.\n   *\n   * @param {Id|Array<Id>} nodeIds - A single id or an Array of ids.\n   */\n  assignActiveStyle(nodeIds) {\n\n    if (!Array.isArray(nodeIds)) nodeIds = [ nodeIds ];\n\n    const defaultColor = this.visOptions.nodes.color;\n\n    // iterate over selected nodes\n    for (let i = nodeIds.length; i--;) {\n      const id = nodeIds[i];\n      const node = this.graphData.nodesById[id];\n      const colorObj = utils.merge({}, defaultColor, node.color);\n      this.graphData.nodes.update({\n        id: id,\n        color: {\n          highlight: colorObj,\n          hover: colorObj\n        }\n      });\n    }\n\n  }\n\n  handleVisDeselectNode(properties) {\n\n    //~ var prevSelectedNodes = properties.previousSelection.nodes;\n    //~ for (var i = prevSelectedNodes.length; i--;) {\n    //~ };\n\n  }\n\n  /**\n   * Called by vis when the dragging of a node(s) has ended.\n   * Vis passes an object containing event-related information.\n   *\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragEnd({ nodes }) {\n\n    if (!nodes.length) {\n      return;\n    }\n\n    if (nodes.length === 1 && this.view.isEnabled('raster')) {\n      const pos = this.network.getPositions()[nodes[0]];\n      this.graphData.nodes.update({\n        id: nodes[0],\n        ...utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster'))),\n      });\n    }\n\n    // reset store\n    this.draggedNode = null;\n\n    // fix node again and store positions\n    // if in static mode, fixing will be ignored\n    this.setNodesMoveable(nodes, false);\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisBeforeDrawing(context2d) {\n\n    const { view, network, backgroundImage } = this;\n\n    if (backgroundImage) {\n      context2d.drawImage(backgroundImage, 0, 0);\n    }\n\n    if (view.isEnabled('raster')) {\n      utils.drawRaster(\n        context2d,\n        network.getScale(),\n        network.getViewPosition(),\n        parseInt(view.getConfig('raster'))\n      );\n    }\n\n  }\n\n  /**\n   *\n   * @param context2d\n   */\n  handleVisAfterDrawing(context2d) {\n\n    if (this.selectRect) {\n\n      const rect = this.selectRect.getRect();\n\n      context2d.beginPath();\n      context2d.globalAlpha = 0.5;\n      context2d.fillStyle = '#EAFFEF';\n      context2d.fillRect(...rect);\n\n      context2d.beginPath();\n      context2d.globalAlpha = 1;\n      context2d.strokeStyle = '#B4D9BD';\n      context2d.strokeRect(...rect);\n\n    }\n\n    if (this.draggedNode && this.view.isEnabled('raster')) {\n\n      const pos = this.network.getPositions()[this.draggedNode];\n      const rPos = utils.getNearestRasterPosition(pos, parseInt(this.view.getConfig('raster')));\n\n      context2d.strokeStyle = 'green';\n      context2d.fillStyle = 'green';\n\n      context2d.beginPath();\n      context2d.moveTo(pos.x, pos.y);\n      context2d.lineTo(rPos.x, rPos.y);\n      context2d.stroke();\n      context2d.beginPath();\n      context2d.arc(rPos.x, rPos.y, 5, 0, Math.PI * 2);\n      context2d.fill();\n\n    }\n\n  }\n\n  /**\n   * called by tooltip class when tooltip is displayed;\n   */\n  constructTooltip(signature, div) {\n\n    const ev = utils.parseJSON(signature);\n    const id = ev.node || ev.edge;\n\n    let text = null;\n    const outType = 'text/html';\n    const inType = 'text/vnd-tiddlywiki';\n\n    if (ev.node) { // node\n\n      const tRef = $tm.tracker.getTiddlerById(id);\n      const tObj = utils.getTiddler(tRef);\n\n      const descr = tObj.fields[$tm.field.nodeInfo];\n\n      if (descr) {\n\n        div.innerHTML = $tw.wiki.renderText(outType, inType, descr);\n\n      } else if (tObj.fields.text) {\n\n        // simply rendering the text is not sufficient as this prevents\n        // us from updating the tooltip content on refresh. So we need\n        // to create a temporary widget that is registered to the dom\n        // node passed by the tooltip.\n\n        utils.registerTransclude(this, 'tooltipWidget', tRef);\n        this.tooltipWidget.setVariable('tv-tiddler-preview', 'yes');\n        this.tooltipWidget.render(div);\n\n      } else {\n\n        div.innerHTML = tRef;\n\n      }\n\n    } else { // edge\n\n      const edge = this.graphData.edgesById[id];\n      const type = $tm.indeces.allETy[edge.type];\n\n      if (type.description) {\n        text = $tw.wiki.renderText(outType, inType, type.description);\n      }\n\n      div.innerHTML = (text || type.label || type.id);\n\n    }\n\n  }\n\n  handleVisHoverElement(ev) {\n\n    if ($tm.mouse.buttons) return;\n\n    //~ this.graphDomNode.style.cursor = 'pointer';\n\n    const id = ev.node || ev.edge;\n    const signature = JSON.stringify(ev);\n\n    if (ev.node) {\n\n      // override the hover color\n      this.assignActiveStyle(id);\n\n    }\n\n    // show tooltip if not in edit mode\n    if (!this.isVisInEditMode() && !this.contextMenu.isShown()) {\n      const populator = this.constructTooltip;\n      this.tooltip.show(signature, populator);\n    }\n\n  }\n\n  handleVisBlurElement(ev) {\n\n    this.tooltip.hide();\n\n  }\n\n  handleVisLoading({ total, iterations }) {\n\n    // we only start to show the progress bar after a while\n    //~ if (params.iterations / params.total < 0.05) return;\n\n    this.graphLoadingBarDomNode.style.display = 'block';\n    this.graphLoadingBarDomNode.setAttribute('max', total);\n    this.graphLoadingBarDomNode.setAttribute('value', iterations);\n\n    //~ var text = 'Loading ' + Math.round((iterations / total) * 100) + '%';\n    //~ this.graphLoadingBarDomNode.innerHTML = text;\n\n  }\n\n  handleVisLoadingDone(params) {\n\n    this.graphLoadingBarDomNode.style.display = 'none';\n\n  }\n\n   /**\n   * Called by vis when a node is being dragged.\n   * Vis passes an object containing event-related information.\n   * @param {Array<Id>} nodes - Array of ids of the nodes\n   *     that were being dragged.\n   */\n  handleVisDragStart({ nodes }) {\n\n    if (nodes.length) {\n\n      this.hidePopups(0, true);\n      this.assignActiveStyle(nodes);\n      this.setNodesMoveable(nodes, true);\n\n      if (nodes.length === 1) {\n        this.draggedNode = nodes[0];\n      }\n\n    }\n\n  }\n\n  /**\n   * called from outside.\n   */\n  destruct() {\n\n    // while the container should be destroyed and the listeners\n    // garbage collected, we remove them manually just to be save\n\n    utils.setDomListeners('remove', window, this.windowDomListeners);\n    utils.setDomListeners('remove', this.domNode, this.widgetDomListeners);\n\n    this._destructVis();\n\n  }\n\n  /**\n   * Only destructs stuff related to vis.\n   */\n  _destructVis() {\n\n    if (!this.network) return;\n\n    utils.setDomListeners('remove', this.canvas, this.canvasDomListeners);\n\n    this.network.destroy();\n    this.network = null;\n\n  }\n\n  /**\n   * Opens the tiddler that corresponds to the given id either as\n   * modal (when in fullscreen mode) or in the story river.\n   */\n  openTiddlerWithId(id) {\n\n    const tRef = $tm.tracker.getTiddlerById(id);\n\n    this.logger('debug', 'Opening tiddler', tRef, 'with id', id);\n\n    if (this.enlargedMode === 'fullscreen') {\n\n      let draftTRef = $tw.wiki.findDraft(tRef);\n      const wasInDraftAlready = !!draftTRef;\n\n      if (!wasInDraftAlready) {\n\n        const type = 'tm-edit-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n        draftTRef = $tw.wiki.findDraft(tRef);\n\n      }\n\n      const args = { draftTRef, originalTRef: tRef };\n\n      $tm.dialogManager.open('fullscreenTiddlerEditor', args, (isConfirmed, outTObj) => {\n\n        if (isConfirmed) {\n\n          const type = 'tm-save-tiddler';\n          this.dispatchEvent({ type: type, tiddlerTitle: draftTRef });\n\n        } else if (!wasInDraftAlready) {\n\n          // also removes the draft from the river before deletion!\n          utils.deleteTiddlers([ draftTRef ]);\n\n        }\n\n        // in any case, remove the original tiddler from the river\n        const type = 'tm-close-tiddler';\n        this.dispatchEvent({ type: type, tiddlerTitle: tRef });\n\n      });\n\n    } else {\n\n      const bounds = this.domNode.getBoundingClientRect();\n\n      this.dispatchEvent({\n        type: 'tm-navigate',\n        navigateTo: tRef,\n        navigateFromTitle: this.getVariable('storyTiddler'),\n        navigateFromNode: this,\n        navigateFromClientRect: {\n          top: bounds.top,\n          left: bounds.left,\n          width: bounds.width,\n          right: bounds.right,\n          bottom: bounds.bottom,\n          height: bounds.height\n        }\n      });\n\n    }\n  }\n\n  /**\n   * The view holder is a tiddler that stores a references to the current\n   * view. If the graph is not bound to a view by the user via an\n   * attribute, the default view holder is used. Otherwise, a temporary\n   * holder is created whose value is set to the view specified by the user.\n   * This way, the graph is independent from view changes made in a\n   * tiddlymap editor.\n   *\n   * This function will only calculate a new reference to the holder\n   * on first call (that is when no view holder is registered to 'this'.\n   *\n   */\n  getViewHolderRef() {\n\n    // the viewholder is never recalculated once it exists\n    if (this.viewHolderRef) {\n      return this.viewHolderRef;\n    }\n\n    this.logger('info', 'Retrieving or generating the view holder reference');\n\n    // if given, try to retrieve the viewHolderRef by specified attribute\n    const viewName = this.getAttr('view');\n    let holderRef = null;\n\n    if (viewName) {\n\n      this.logger('log', `User wants to bind view \"${viewName}' to graph`);\n\n      const viewRef = `${$tm.path.views}/${viewName}`;\n\n      if ($tw.wiki.getTiddler(viewRef)) {\n\n        // create a view holder that is exclusive for this graph\n\n        holderRef = `${$tm.path.localHolders}/${utils.genUUID()}`;\n        this.logger('log', `Created an independent temporary view holder \"${holderRef}\"`);\n\n        // we do not use setView here because it would store and reload the view unnecessarily...\n        utils.setText(holderRef, viewRef);\n\n        this.logger('log', `View \"${viewRef}' inserted into independend holder`);\n\n      } else {\n        this.logger('log', `View \"${viewName}\" does not exist`);\n      }\n\n    }\n\n    if (!holderRef) {\n      this.logger('log', 'Using default (global) view holder');\n      holderRef = $tm.ref.defaultViewHolder;\n    }\n\n    return holderRef;\n\n  }\n\n  /**\n   * This function will switch the current view reference of the\n   * view holder.\n   *\n   * NOTE:\n   * The changes will be picked up in the next refresh cycle.\n   * This function will never update the view object currently\n   * held by this widget (this.view)! This would create a race\n   * condition where the view has changed, but the graph data hasn't\n   * and maybe a stabilization event fires in this moment. At this point\n   * it would work with graph data that doesn't relate to the view\n   * and do bad things, trust me, big time bad things.\n   *\n   * @param {ViewAbstraction|string} view – A reference to the view.\n   * @param {string} [viewHolderRef] – A reference to the view holder.\n   */\n  setView(view, viewHolderRef) {\n\n    if (!ViewAbstraction.exists(view)) {\n\n      return;\n    }\n\n    view = new ViewAbstraction(view);\n\n    const viewLabel = view.getLabel();\n    viewHolderRef = viewHolderRef || this.viewHolderRef;\n    this.logger('info', `Inserting view \"${viewLabel}\" into holder \"${viewHolderRef}\"`);\n    $tw.wiki.addTiddler(new $tw.Tiddler({\n      title : viewHolderRef,\n      text : viewLabel\n    }));\n\n    // WARNING: Never set this.view to the new view state at this point.\n    // e.g. via `this.view = this.getView(true)` This would produce a\n    // race condition!\n\n  }\n\n  /**\n   * This function will return a view abstraction that is based on the\n   * view specified in the view holder of this graph.\n   *\n   * @param {boolean} noCache - Retrieve the view reference again\n   *     from the holder and recreate the view abstraction object.\n   * @return {ViewAbstraction} the view\n   */\n  getView(noCache) {\n\n    if (!noCache && this.view) {\n      return this.view;\n    }\n\n    const viewHolderRef = this.getViewHolderRef();\n\n    // transform into view object\n    const ref = utils.getText(viewHolderRef);\n\n    this.logger('debug', 'Retrieved view from holder');\n\n    let view;\n\n    if (ViewAbstraction.exists(ref)) {\n\n      view = new ViewAbstraction(ref);\n\n    } else {\n\n      this.logger('debug', `Warning: View \"${ref}\" doesn't exist. Default is used instead.`);\n      view = new ViewAbstraction('Default');\n\n    }\n\n    return view;\n\n  }\n\n  reloadBackgroundImage(msg) {\n\n    this.backgroundImage = null;\n\n    const bgFieldValue = this.view.getConfig('background_image');\n    const imgTObj = utils.getTiddler(bgFieldValue);\n    if (!imgTObj && !bgFieldValue) return;\n\n    const img = new Image();\n    const ajaxCallback = function(b64) { img.src = b64; };\n    img.onload = () => {\n      // only now set the backgroundImage to the img object!\n      this.backgroundImage = img;\n      this.repaintGraph();\n      if (msg) {\n        $tm.notify(msg);\n      }\n    };\n\n    if (imgTObj) { // try loading from tiddler\n      const urlField = imgTObj.fields['_canonical_uri'];\n      if (urlField) { // try loading by uri field\n        utils.getImgFromWeb(urlField, ajaxCallback);\n      } else if (imgTObj.fields.text) { // try loading from base64\n        img.src = $tw.utils.makeDataUri(imgTObj.fields.text, imgTObj.fields.type);\n      }\n\n    } else if (bgFieldValue) { // try loading directly from reference\n      utils.getImgFromWeb(bgFieldValue, ajaxCallback);\n\n    }\n\n  }\n\n  /**\n   * The graph of this widget is only repainted if the following counts:\n   *\n   * The network object exists (prerequisit).\n   *\n   * 1. We are not in fullscreen at all\n   * 2. This particular graph instance is currently running fullscreen.\n   */\n  repaintGraph() {\n\n    const isInFS = $tw.utils.hasClass(this.document.body,\n                                    'tmap-has-fullscreen-widget');\n    if (this.network && (!isInFS || (isInFS && this.enlargedMode))) {\n\n      this.logger('info', 'Repainting the whole graph');\n\n      this.network.redraw();\n      this.fitGraph(0, 1000);\n\n    }\n\n  }\n\n  /**\n   * If a button is enabled it means it is displayed on the graph canvas.\n   *\n   * @param {string} name - The name of the button to enabled. Has to\n   *     correspond with the css button name.\n   * @param {boolean} enable - True if the button should be visible,\n   *     false otherwise.\n   */\n  setGraphButtonEnabled(name, enable) {\n\n    const className = `vis-button tmap-${name}`;\n    const b = utils.getFirstElementByClassName(className, this.domNode);\n    $tw.utils.toggleClass(b, 'tmap-button-enabled', enable);\n\n  }\n\n  /**\n   * Allow the given nodes to be moveable.\n   *\n   * @param {Array<number>} nodeIds - The ids of the nodes for which\n   *     we allow or disallow the movement.\n   * @param {boolean} isMoveable - True, if the nodes are allowed to\n   *     move or be moved.\n   */\n  setNodesMoveable(nodeIds, isMoveable) {\n\n    if (!nodeIds || !nodeIds.length || this.view.isEnabled('physics_mode')) {\n    // = no ids passed or in floating mode\n      return;\n    }\n\n    const updates = [];\n    const isFixed = !isMoveable;\n    for (let i = nodeIds.length; i--;) {\n\n      updates.push({\n        id: nodeIds[i],\n        fixed: { x: isFixed, y: isFixed }\n      });\n\n    }\n\n    this.graphData.nodes.update(updates);\n\n    if (isFixed) {\n\n      this.logger('debug', 'Fixing', updates.length, 'nodes');\n\n      // if we fix nodes in static mode then we also store the positions\n      this.view.saveNodePositions(this.network.getPositions());\n      // prevent zoom\n      this.isPreventZoomOnNextUpdate = true;\n    }\n\n  }\n\n  /**\n   * This function will create the dom elements for all tiddlymap-vis\n   * buttons and register the event listeners.\n   *\n   * @param {Object<string, function>} buttonEvents - The label of the\n   *     button that is used as css class and the click handler.\n   */\n  addGraphButtons(buttonEvents) {\n\n    const parent = utils.getFirstElementByClassName('vis-navigation', this.domNode);\n\n    for (let name in buttonEvents) {\n      const div = this.document.createElement('div');\n      div.className = `vis-button tmap-${name}`;\n\n      div.addEventListener('click', buttonEvents[name].bind(this), false);\n      parent.appendChild(div);\n\n\n      this.setGraphButtonEnabled(name, true);\n\n    }\n  }\n}\n\n/*** Exports *******************************************************/\n\nexport {\n  MapWidget as tmap,\n  MapWidget as tiddlymap, // legacy\n};\n"],"sourceRoot":"../../../../../../src/plugins"}