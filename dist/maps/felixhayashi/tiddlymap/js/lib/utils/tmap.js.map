{"version":3,"sources":["felixhayashi/tiddlymap/js/lib/utils/tmap.js"],"names":["basicUtils","wikiUtils","getLabel","tiddler","aliasField","tObj","getTiddler","fields","title","getIterableCollection","col","DataSet","get","getValues","Array","isArray","returnType","result","keys","Object","i","length","push","convert","outputType","mapper","array","hashmap","dataset","getDataUri","type","isForceBase64","imgTObj","body","text","encoding","$tw","config","contentTypeInfo","replace","hasSubString","base64","eTyFiltAutoPrefix","getEdgeTypeMatches","filter","titles","getTiddlersByPrefix","$tm","path","edgeTypes","iterator","removePrefix","getMatches","isEdgeTypeMatch","isMatch","groupByProperty","prop","makeHashMap","item","val","getPrettyFilter","expr","trim","re","operands","match","stringsPlusDummies","split","operandIndex","parts","l","join","drawRaster","ctx","scaleFactor","viewCenter","rasterSize","color","getNearestRasterPosition","centerX","x","centerY","y","scaledWidth","canvas","width","scaledHeight","height","extraLines","hSpace","Math","ceil","vSpace","left","right","top","bottom","beginPath","moveTo","lineTo","strokeStyle","fillStyle","stroke","refreshDataSet","ds","ltNew","ltOld","inserted","updated","withoutPosition","removed","id","isEqual","remove","undefined","add","getId","getDublicates","tiddlers","getTiddlersWithField","limit","getTiddlerRef","keysOfItemsWithProperty","key","index","keyOfItemWithProperty","getLookupTable","lookupKey","lookupTable","idx","Error","getArrayValuesAsHashmapKeys","getSnapshotTitle","viewLabel","Date","toDateString"],"mappings":"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","file":"../../../../../../felixhayashi/tiddlymap/js/lib/utils/tmap.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/lib/utils/tmap\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport vis                  from '$:/plugins/felixhayashi/vis/vis.js';\nimport {\n  EnvironmentError,\n  InvalidArgumentException,\n}                           from '$:/plugins/felixhayashi/tiddlymap/js/exception';\nimport * as basicUtils      from '$:/plugins/felixhayashi/tiddlymap/js/lib/utils/basic';\nimport * as wikiUtils       from '$:/plugins/felixhayashi/tiddlymap/js/lib/utils/wiki';\n\n/**\n * @param {Tiddler} tiddler\n * @param {string} aliasField - A tiddler field that contains an\n *     alternative title (e.g. \"caption\").\n * @return {string|undefined} If the `aliasField` exists and is not\n *     empty, the value of the `aliasField` otherwise the tiddler's\n *     title or undefined if the tiddler doesn't exist.\n */\nexport const getLabel = (tiddler, aliasField) => {\n  const tObj = wikiUtils.getTiddler(tiddler);\n  return (tObj && tObj.fields[aliasField]? tObj.fields[aliasField] : tObj.fields.title);\n};\n\n/**\n * This function will return a collection object whose data can be\n * via `Object.keys(col)` in a loop.\n *\n * @param {Collection} col - A collection\n * @return {Hashmap} The iterable object.\n */\nexport const getIterableCollection = col => col instanceof vis.DataSet ? col.get() : col;\n\n/**\n * Extract all the values from a collection. If `col` is an object,\n * only properties are considered that are its own and iterable.\n *\n * @param {Collection} col\n * @return {Array} An array\n */\nexport const getValues = col => {\n\n  if (Array.isArray(col)) {\n\n    return col; // bounce back.\n\n  } else if (col instanceof vis.DataSet) { // a dataset\n\n    return col.get({ returnType: 'Array' });\n\n  }\n\n  const result = [];\n  const keys = Object.keys(col);\n  for (let i = keys.length; i--;) {\n    result.push(col[keys[i]]);\n  }\n\n  return result;\n\n};\n\n/**\n * Transforms a collection of a certain type into a collection of\n * another type.\n *\n * **Attention**: When trying to convert an array into a object, the\n * array will be simply bounced back. Let's hope no one added enumerable\n * properties to Array.prototype :)\n *\n * @param {Collection} col - The collection to convert.\n * @param {CollectionTypeString} [outputType=\"dataset\"] - The output type.\n * @return {Collection} A **new** collection of type `outputType`.\n */\nexport const convert = (col, outputType) => {\n\n  if (typeof col !== 'object') {\n    throw new InvalidArgumentException(col, outputType);\n  }\n\n  if (outputType === 'object') {\n    outputType = 'hashmap';\n  }\n\n  const mapper = {\n    array: col => getValues(col),\n    hashmap: col =>\n      col instanceof vis.DataSet ? col.get({ returnType: 'Object' }) : col,\n    dataset: col =>\n      col instanceof vis.DataSet ? col : (!Array.isArray(col) ? getValues(col) : new vis.DataSet(col))\n  };\n\n  return mapper[outputType](col);\n\n};\n\n/**\n * @param {Tiddler} tiddler\n * @param {string} [type]\n * @param {boolean} [isForceBase64]\n * @return {string}\n */\nexport const getDataUri = (tiddler, type, isForceBase64) => {\n\n  const imgTObj = wikiUtils.getTiddler(tiddler);\n  type = type || imgTObj.fields.type || 'image/svg+xml';\n  let body = imgTObj.fields.text;\n  let encoding = $tw.config.contentTypeInfo[type].encoding;\n\n  if (type === 'image/svg+xml') {\n\n    // see http://stackoverflow.com/questions/10768451/inline-svg-in-css\n    body = body.replace(/\\r?\\n|\\r/g, ' ');\n\n    if (!basicUtils.hasSubString('xmlns', body)) {\n      // @tiddlywiki it is bad to remove the xmlns attribute!\n\n      body = body.replace(/<svg/, '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n    }\n\n  }\n\n  if (isForceBase64 && encoding !== 'base64') {\n    encoding = 'base64';\n    body = basicUtils.base64(body);\n  }\n\n  return `data:${type};${encoding},${body}`;\n\n};\n\n// @todo move this to environment\nconst eTyFiltAutoPrefix = '[all[]] ';\n\n/**\n *\n * @param filter\n * @param titles\n * @return {*}\n */\nexport const getEdgeTypeMatches = (filter = '', titles) => {\n\n  if (!titles) {\n    titles = wikiUtils.getTiddlersByPrefix(`${$tm.path.edgeTypes}/`, {\n      iterator: 'eachTiddlerPlusShadows',\n      removePrefix: true\n    });\n  }\n\n  if (titles != null && !Array.isArray(titles)) {\n    titles = Object.keys(titles);\n  }\n\n  return wikiUtils.getMatches(eTyFiltAutoPrefix + filter, titles);\n\n};\n\nexport const isEdgeTypeMatch = (title, filter = '') =>\n  wikiUtils.isMatch(title, eTyFiltAutoPrefix + filter);\n\n/**\n *\n */\nexport const groupByProperty = (col, prop) => {\n\n  col = getIterableCollection(col);\n\n  const result = basicUtils.makeHashMap();\n  const keys = Object.keys(col);\n\n  for (let i in keys) {\n\n    const item = col[keys[i]];\n    const val = item[prop];\n\n    if (val == null) { // null or undefined\n\n      // @todo use exception class\n      throw 'Cannot group by property ' + prop;\n\n    } else {\n\n      if (!Array.isArray(result[val])) {\n        result[val] = [];\n      }\n      result[val].push(item);\n\n    }\n  }\n\n  return result;\n\n};\n\n/**\n * Turns the filter expression in a nicely formatted (but unusable)\n * text, making it easier to edit long filter expressions.\n *\n * @param {string} expr - A valid filter expression.\n * @result {string} A formatted (unusable) filter expression.\n */\nexport const getPrettyFilter = expr => {\n\n  // remove outer spaces and separate operands\n  expr = expr.trim().replace('][', '] [');\n\n  // regex to identify operands\n  const re = /[+-]?\\[.+?[\\]\\}\\>]\\]/g;\n\n  // get operands\n  const operands = expr.match(re);\n\n  // replace operands with dummies and trim again to avoid trailing spaces\n  expr = expr.replace(re, ' [] ').trim();\n\n  // turn it into an array\n  const stringsPlusDummies = expr.split(/\\s+/);\n\n  let operandIndex = 0;\n  const parts = [];\n  for (let i = 0, l = stringsPlusDummies.length; i < l; i++) {\n    parts[i] = (stringsPlusDummies[i] === '[]' ? operands[operandIndex++] : stringsPlusDummies[i]);\n  }\n\n  return parts.join('\\n');\n\n};\n\n/**\n * This function will draw a raster on the network canvas that will\n * adjust to the network's current scaling factor and viewport offset.\n *\n * @param {CanvasRenderingContext2D} ctx - The canvas's context passed by vis.\n * @param {number} scaleFactor - The current scale factor of the network.\n * @param {Object} viewCenter - Virtual center point of the view.\n * @param {number} rasterSize - The size of the squares that are drawn.\n * @param {string} color - A string parsed as CSS color value.\n */\nexport const drawRaster = (ctx, scaleFactor, viewCenter, rasterSize, color = '#D9D9D9') => {\n\n  // from now on the most central raster point\n  const { x: centerX, y: centerY } = basicUtils.getNearestRasterPosition(viewCenter, rasterSize);\n\n  const scaledWidth = ctx.canvas.width / scaleFactor;\n  const scaledHeight = ctx.canvas.height / scaleFactor;\n\n  // some extra lines to ensure the canvas is completely filled with lines\n  const extraLines = rasterSize * 2;\n\n  // calculate the space that is required to draw the rasters\n  const hSpace = Math.ceil((scaledWidth / rasterSize) / 2) * rasterSize + extraLines;\n  const vSpace = Math.ceil((scaledHeight / rasterSize) / 2) * rasterSize + extraLines;\n\n  // align the space to the center points and calculate the offsets\n  const left = centerX - hSpace;\n  const right = centerX + hSpace;\n  const top = centerY - vSpace ;\n  const bottom = centerY + vSpace;\n\n  ctx.beginPath();\n\n  // draw vertical lines\n  for (let x = left; x < right; x += rasterSize) {\n    ctx.moveTo(x, top);\n    ctx.lineTo(x, bottom);\n  }\n\n  // draw horizontal lines\n  for (let y = top; y <= bottom; y += rasterSize) {\n    ctx.moveTo(left, y);\n    ctx.lineTo(right, y);\n  }\n\n  ctx.strokeStyle = color;\n  ctx.fillStyle = color;\n  ctx.stroke();\n\n};\n\n/**\n * Updates a dataset.\n *\n * Note: never use the dataset's update() method, it does not properly remove\n * obsolete properties! – use remove and add instead.\n *\n * @param {vis.DataSet} [ds] - The dataset to be updated\n * @param {Hashmap<id, Node>} ltNew - Lookup table that contains the *new* set of nodes.\n */\nexport const refreshDataSet = (ds, ltNew) => {\n\n  const ltOld = ds.get({ returnType: 'Object' });\n\n  const inserted = [];\n  const updated = [];\n  const withoutPosition = [];\n  const removed = [];\n\n  for (let id in ltNew) {\n\n    if (ltOld[id]) { // element already exists in graph\n\n      if (basicUtils.isEqual(ltOld[id], ltNew[id])) {\n        // simply keep element\n        continue;\n      }\n\n      updated.push(id);\n      ds.remove(id);\n\n    } else {\n\n      inserted.push(id);\n\n    }\n\n    if (ltNew[id].x === undefined) {\n      withoutPosition.push(id);\n    }\n\n    ds.add(ltNew[id]);\n  }\n\n  for (let id in ltOld) {\n    if (!ltNew[id]) {\n      removed.push(id);\n      ds.remove(id);\n    }\n  }\n\n  return {\n    withoutPosition,\n    inserted,\n    updated,\n    removed,\n  };\n\n};\n\n/**\n * Returns the tmap id that is stored in a designated field in the tiddler.\n *\n * @param tiddler\n * @return {string} the tmap id of this tiddler\n */\nexport const getId = tiddler => wikiUtils.getTiddler(tiddler).fields['tmap.id'];\n\n/**\n * Returns all other tiddlers that have the same tmap.id field entry.\n *\n * Note: typically tiddlers don't have the same id assigned, however,\n * this can happen when tiddlers are imported or cloned.\n *\n * @param {Tiddler} tiddler\n * @return {array<TiddlerReference>} a list of tiddlers with the same id as the\n *    provided tiddler (excluding the provided tiddler itself).\n */\nexport const getDublicates = tiddler => {\n\n  const id = getId(tiddler);\n\n  if (!id) {\n\n    return [];\n\n  }\n\n  const tiddlers = wikiUtils.getTiddlersWithField('tmap.id', id, {limit: 2});\n  delete tiddlers[wikiUtils.getTiddlerRef(tiddler)];\n\n  return Object.keys(tiddlers);\n\n};\n\n/**\n * Function that searches an array for an object with a property\n * having a certain value.\n *\n * Attention: Not the item itself but the item's key is returned.\n *\n * @param {Collection} col - The collection to search in.\n * @param {string} key - The property name to look for.\n * @param {*} [val] - An optional value that the object's property must have\n *     in order to match.\n * @param {number} [limit] - An optional result limit (>0) to stop the search.\n * @return {Array<Id>} An array containing the indeces of matching items.\n */\nexport const keysOfItemsWithProperty = (col, key, val, limit) => {\n\n  col = getIterableCollection(col);\n\n  const keys = Object.keys(col);\n  const result = [];\n\n  limit = (typeof limit === 'number' ? limit : keys.length);\n\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const index = keys[i];\n    if (typeof col[index] === 'object' && col[index][key]) {\n      if (!val || col[index][key] === val) {\n        result.push(index);\n        if (result.length === limit) {\n          break;\n        }\n      }\n    }\n  }\n\n  return result;\n\n};\n\n/**\n *\n * @param col\n * @param key\n * @param val\n * @return {*}\n */\nexport const keyOfItemWithProperty = (col, key, val) =>\n  keysOfItemsWithProperty(col, key, val, 1)[0];\n\n/**\n * In a collection where all elements have a **distinct** property\n * `lookupKey`, use the value of each element's `lookupKey` as key\n * to identify the object. If no property `lookupKey` is specified,\n * the collection's values are used as keys and `true` is used as value,\n * however, if the used keys are not strings, an error is thrown.\n *\n * @param {Collection} col - The collection for which to create a lookup table.\n * @param {string} [lookupKey] - The property name to use as index in\n *     the lookup table. If not specified, the collection values are tried\n *     to be used as indeces.\n * @return {Hashmap} The lookup table.\n */\nexport const getLookupTable = (col, lookupKey) => {\n\n  col = getIterableCollection(col);\n\n  const lookupTable = basicUtils.makeHashMap();\n  const keys = Object.keys(col);\n\n  for (let i = 0, l = keys.length; i < l; i++) {\n\n    const key = keys[i];\n    const idx = (lookupKey ? col[key][lookupKey] : col[key]);\n    const type = typeof idx;\n\n    if ((type === 'string' && idx !== '') || type === 'number') {\n      if (!lookupTable[idx]) { // doesn't exist yet!\n        lookupTable[idx] = (lookupKey ? col[key] : true);\n        continue;\n      }\n    }\n\n    // @todo use exception class\n    throw new Error(`Cannot use \"${idx}\" as lookup table index`);\n\n  }\n\n  return lookupTable;\n\n};\n\n/**\n * Alias for {@link getLookupTable}\n */\nexport const getArrayValuesAsHashmapKeys = getLookupTable;\n\n/**\n *\n * @param viewLabel\n * @param type\n */\nexport const getSnapshotTitle = (viewLabel, type) =>\n  `Snapshot – ${viewLabel} (${new Date().toDateString()}). ${type || 'png'}`;\n"],"sourceRoot":"../../../../../../../src/plugins"}