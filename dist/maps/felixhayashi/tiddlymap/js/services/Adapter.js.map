{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Adapter.js"],"names":["env","Adapter","tracker","edgeTypeSubscriberRegistry","getTiddlerById","bind","getId","getIdByTiddler","assignId","indeces","$tm","wiki","$tw","visShapesWithTextInside","getLookupTable","edge","_processEdge","edges","convert","i","length","deleteEdge","action","logger","fromTRef","from","tiddlerExists","tObj","getTiddler","type","allETy","getInstance","handlers","getAllForType","fn","exists","save","groupBy","opts","start","tRefs","getMatches","selector","allPotentialNodes","getEdgesForSet","toWL","typeWL","adjList","groupByProperty","stop","matches","addProperties","steps","visited","getArrayValuesAsHashmapKeys","view","allEdgesLeadingToNeighbours","makeHashMap","allNeighbours","maxSteps","parseInt","direction","getConfig","isWalkBoth","isWalkIn","isWalkOut","getAdjacencyList","addAsNeighbour","role","neighboursOfThisStep","id","tRef","node","makeNode","push","step","isSystemOrDraft","outgoing","getEdges","t","toArrow","invertedArrow","incoming","j","neighbourhood","nodes","filter","edgeTypeWL","neighbourhoodScope","getNodeFilter","neighScope","getEdgeTypeFilter","graph","selectNodesByReferences","outputType","neighbours","getNeighbours","group","Object","assign","isEnabled","nodeTRefs","getTiddlersByIds","removeObsoleteViewData","attachStylesToNodes","tiddler","eTySubscribers","getAll","l","loadEdges","to","addStyleToEdge","tiddlers","getAllPotentialNodes","newName","selectEdgesByType","deleteTiddler","fullPath","result","keys","nodeIds","options","selectNodesByIds","protoNode","merge","label","fields","field","nodeLabel","renderText","title","src","protoByTRef","glNTy","inheritors","getInheritors","proto","style","inheritedStyles","getInheritedNodeStyles","viewNodeData","getNodeData","isStaticMode","icon","inheritedStyle","getIcon","color","parseJSON","nodeData","fixed","x","y","isColorObject","background","border","undefined","addNodeIcon","font","shape","glNTyById","deleteTiddlers","viewRefs","allViews","removeNode","deleteEdges","ids","deleteNode","protoTiddler","generateNewTitle","getRandomLabel","Tiddler","text","getModificationFields","getCreationFields","addTiddler","addNode","Array","isArray","DataSet","getFAdigits","str","substr","fa","face","code","String","fromCharCode","size","tw","imgTObj","image","getDataUri","data","obsoleteDataItems","getLabel","saveNodeData","isTrue","faIcon","twIcon"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Adapter.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/Adapter\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport ViewAbstraction              from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType                     from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport NodeType                     from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport utils                        from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Edge                         from '$:/plugins/felixhayashi/tiddlymap/js/Edge';\nimport vis                          from '$:/plugins/felixhayashi/vis/vis.js';\nimport * as env                     from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\nimport { run as getContrastColour } from '$:/core/modules/macros/contrastcolour.js';\n\n/***************************** CODE ********************************/\n\n/**\n * This library acts as an abstraction layer above the tiddlywiki\n * system. All the provided methods give the api-user the chance\n * to interact with tiddlywiki as if it was a simple graph database.\n *\n * Everything that is related to retrieving or inserting nodes and\n * edges is handled by the adapter class.\n *\n * You don't need to create your own instance of this class.\n * The adapter service may be accessed from anywhere using\n * `$tm.apapter`.\n *\n * @constructor\n */\nclass Adapter {\n\n  /**\n   * @param {Tracker} tracker\n   * @param {EdgeTypeSubscriberRegistry} edgeTypeSubscriberRegistry\n   */\n  constructor(tracker, edgeTypeSubscriberRegistry) {\n\n    this.getTiddlerById = tracker.getTiddlerById.bind(tracker);\n    this.getId = tracker.getIdByTiddler.bind(tracker);\n    this.assignId = tracker.assignId.bind(tracker);\n\n    this.edgeTypeSubscriberRegistry = edgeTypeSubscriberRegistry;\n\n    this.indeces = $tm.indeces;\n    this.wiki = $tw.wiki;\n\n    this.visShapesWithTextInside = utils.getLookupTable([\n      'ellipse', 'circle', 'database', 'box', 'text'\n    ]);\n\n  }\n\n  /**\n   * This function will delete the specified edge object from the system.\n   *\n   * @param {Edge} edge - The edge to be deleted. The edge necessarily\n   *     needs to possess an `id` and a `from` property.\n   * @return {Edge} The deleted edge is returned.\n   */\n  deleteEdge(edge) {\n\n    return this._processEdge(edge, 'delete');\n\n  }\n\n  /**\n   * Persists an edge by storing the vector (from, to, type).\n   *\n   * @param {Edge} edge - The edge to be saved. The edge necessarily\n   *     needs to possess a `to` and a `from` property.\n   * @return {Edge} The newly inserted edge.\n   */\n  insertEdge(edge) {\n\n    return this._processEdge(edge, 'insert');\n\n  }\n\n  /**\n   * Removes multiple edges from several stores.\n   *\n   * @param {EdgeCollection} edges - The edges to be deleted.\n   */\n  deleteEdges(edges) {\n\n    edges = utils.convert(edges, 'array');\n    for (let i = edges.length; i--;) {\n      this.deleteEdge(edges[i]);\n    }\n\n  }\n\n  /**\n   * Private function to handle the insertion or deletion of an edge.\n   * It prepares the process according to the action type and delegates\n   * the task to more specific functions.\n   *\n   * @private\n   * @return {Edge} The processed edge.\n   */\n  _processEdge(edge, action) {\n\n    $tm.logger('debug', 'Edge', action, edge);\n\n    // get from-node and corresponding tiddler\n    const fromTRef = this.getTiddlerById(edge.from);\n\n    if (!fromTRef || !utils.tiddlerExists(fromTRef)) {\n      return;\n    }\n\n    const tObj = utils.getTiddler(fromTRef);\n    const type = this.indeces.allETy[edge.type] || EdgeType.getInstance(edge.type);\n    const handlers = this.edgeTypeSubscriberRegistry.getAllForType(type);\n    const fn = `${action}Edge`;\n\n    for (let i = handlers.length; i--;) {\n      (handlers[i][fn])(tObj, edge, type);\n    }\n\n    // if type didn't exist yet, create it\n    if (action === 'insert' && !type.exists()) {\n      type.save();\n    }\n\n    return edge;\n\n  }\n\n  /**\n   * This function will return an adjacency list for the nodes\n   * present in the current system. The list may be restricted by\n   * optional filters.\n   *\n   * @param {string} [groupBy='to'] - Specifies by which property the\n   *     adjacency list is indexed. May be either 'from' or 'to'.\n   * @param {Hashmap} [opts] - An optional options object.\n   * @param {Hashmap} [opts.typeWL] - A whitelist lookup-table\n   *    that restricts which edge-types are included.\n   * @param {Hashmap} [opts.edges] - A set of edges on which basis\n   *     the adjacency list is build. If not provided,\n   *     all edges in the system are considered.\n   * @return {Object<Id, Array<Edge>>} For each key (a node id) an\n   *     array of edges pointing 'from' (or 'to'; depends on `groupBy`)\n   *     is supplied as value.\n   */\n  getAdjacencyList(groupBy, opts = {}) {\n\n    $tm.start('Creating adjacency list');\n\n    if (!opts.edges) {\n      const tRefs = utils.getMatches(env.selector.allPotentialNodes);\n      opts.edges = this.getEdgesForSet(tRefs, opts.toWL, opts.typeWL);\n    }\n\n    const adjList = utils.groupByProperty(opts.edges, groupBy || 'to');\n\n    $tm.stop('Creating adjacency list');\n\n    return adjList;\n\n  }\n\n  /**\n   * This function will return all neighbours of a graph denoted by\n   * a set of tiddlers.\n   *\n   * @todo parts of this code may be outsourced into a function to\n   * prevent repeating code.\n   *\n   * @param {Array<TiddlerReference>} matches - The original set that\n   *     defines the starting point for the neighbourhood discovery\n   * @param {Hashmap} [opts] - An optional options object.\n   * @param {Hashmap} [opts.typeWL] - A whitelist lookup-table\n   *    that restricts which edges are travelled to reach a neighbour.\n   * @param {Hashmap} [opts.edges] - An initial set of edges that is\n   *    used in the first step to reach immediate neighbours, if no\n   *    set of edges is specified, all exsisting edges will be considered.\n   * @param {number} [opts.steps] - An integer value that specifies\n   *    the scope of the neighbourhood. A node is considered a neighbour\n   *    if it can be reached within the given number of steps starting\n   *    from original set of tiddlers returned by the node filter.\n   * @param {Hashmap} [opts.addProperties] - a hashmap\n   *     containing properties to be added to each node.\n   *     For example:\n   *     {\n   *       group: 'g1',\n   *       color: 'red'\n   *     }\n   * @return {Object} An object of the form:\n   *     {\n   *       nodes: { *all neighbouring nodes* },\n   *       edges: { *all edges connected to neighbours* },\n   *     }\n   */\n  getNeighbours(matches, opts = {}) {\n\n    $tm.start('Get neighbours');\n\n    const { addProperties, toWL, typeWL, steps } = opts;\n    const { allETy } = this.indeces;\n\n    // index of all tiddlers have already are been visited, either by\n    // having been included in the original set, or by having been\n    // recorded as neighbour during the discovery.\n    const visited = utils.getArrayValuesAsHashmapKeys(matches);\n    const view = ViewAbstraction.exists(opts.view) ? new ViewAbstraction(opts.view) : null;\n    const allEdgesLeadingToNeighbours = utils.makeHashMap();\n    const allNeighbours = utils.makeHashMap();\n    const maxSteps = (parseInt(steps) > 0 ? steps : 1);\n    const direction = (opts.direction || (view && view.getConfig('neighbourhood_directions')));\n    const isWalkBoth = (!direction || direction === 'both');\n    const isWalkIn = (isWalkBoth || direction === 'in');\n    const isWalkOut = (isWalkBoth || direction === 'out');\n\n    // adjacency receives whitelists through opts\n    const adjList = this.getAdjacencyList('to', opts);\n\n    const addAsNeighbour = (edge, role, neighboursOfThisStep) => {\n      allEdgesLeadingToNeighbours[edge.id] = edge;\n      const tRef = this.getTiddlerById(edge[role]);\n      if (!visited[tRef]) {\n        visited[tRef] = true;\n        const node = this.makeNode(tRef, addProperties);\n        if (node) { // saveguard against obsolete edges or other problems\n          // record node\n          allNeighbours[node.id] = node;\n          neighboursOfThisStep.push(tRef);\n        }\n      }\n    };\n\n    // needed later\n    let step;\n\n    // loop if still steps to be taken and we have a non-empty starting set\n    for (step = 0; step < maxSteps && matches.length; step++) {\n\n      // neighbours that are discovered in the current step;\n      // starting off from the current set of matches;\n      const neighboursOfThisStep = [];\n\n      // loop over all nodes in the original set\n      for (let i = matches.length; i--;) {\n\n        if (utils.isSystemOrDraft(matches[i])) {\n          // = this might happen if the user manually created edges\n          // that link to a system/draft tiddler or if the original\n          // set contained system/draft tiddlers.\n          continue;\n        }\n\n        // get all outgoing edges\n        // = edges originating from the starting set and point outwards\n        const outgoing = this.getEdges(matches[i], toWL, typeWL);\n        for (let id in outgoing) {\n\n          const t = allETy[outgoing[id].type];\n          if (isWalkBoth || isWalkOut && t.toArrow || isWalkIn && t.invertedArrow) {\n\n            addAsNeighbour(outgoing[id], 'to', neighboursOfThisStep);\n          }\n        }\n\n        // get all incoming edges\n        // = edges originating from outside pointing to the starting set\n        const incoming = adjList[this.getId(matches[i])];\n        if (!incoming) {\n          continue;\n        }\n\n        for (let j = incoming.length; j--;) {\n          const t = allETy[incoming[j].type];\n          if (isWalkBoth || isWalkIn && t.toArrow || isWalkOut && t.invertedArrow) {\n            addAsNeighbour(incoming[j], 'from', neighboursOfThisStep);\n          }\n        }\n      }\n\n      // the current set of newly discovered neighbours forms the\n      // starting point for the next discovery\n      matches = neighboursOfThisStep;\n\n    }\n\n    const neighbourhood = {\n      nodes: allNeighbours,\n      edges: allEdgesLeadingToNeighbours\n    };\n\n    $tm.logger('debug', 'Retrieved neighbourhood', neighbourhood, 'steps', step);\n\n    $tm.stop('Get neighbours');\n\n    return neighbourhood;\n\n  }\n\n  /**\n   * This function will assemble a graph object based on the supplied\n   * node and edge filters. Optionally, a neighbourhood may be\n   * merged into the graph neighbourhood.\n   *\n   * @param {string|ViewAbstraction} [view] - The view in which\n   *     the graph will be displayed.\n   * @param {string|ViewAbstraction} [filter] - If supplied,\n   *     this will act as node filter that defines which nodes\n   *     are to be displayed in the graph; a possible view node filter\n   *     would be ignored.\n   * @param {Hashmap} [edgeTypeWL] - A whitelist lookup-table\n   *     that restricts which edges are travelled to reach a neighbour.\n   * @param {number} [neighbourhoodScope] - An integer value that\n   *     specifies the scope of the neighbourhood in steps.\n   *     See {@link Adapter#getNeighbours}\n   * @return {Object} An object of the form:\n   *     {\n   *       nodes: { *all nodes in the graph* },\n   *       edges: { *all edges in the graph* },\n   *     }\n   *     Neighbours will be receive the 'tmap:neighbour' type.\n   */\n  getGraph({ view, filter, edgeTypeWL, neighbourhoodScope } = {}) {\n\n    $tm.start('Assembling Graph');\n\n    view = ViewAbstraction.exists(view) ? new ViewAbstraction(view) : null;\n    const matches = utils.getMatches(filter || (view && view.getNodeFilter('compiled')));\n    const neighScope = parseInt(neighbourhoodScope || (view && view.getConfig('neighbourhood_scope')));\n    const typeWL = (edgeTypeWL || (view && view.getEdgeTypeFilter('whitelist')));\n    const toWL = utils.getArrayValuesAsHashmapKeys(matches);\n\n    const graph = {\n      edges: this.getEdgesForSet(matches, toWL, typeWL),\n      nodes: this.selectNodesByReferences(matches, {\n        view: view,\n        outputType: 'hashmap'\n      })\n    };\n\n    if (neighScope) {\n      const neighbours = this.getNeighbours(matches, {\n        steps: neighScope,\n        view: view,\n        typeWL: typeWL,\n        addProperties: {\n          group: 'tmap:neighbour'\n        }\n      });\n\n      // add neighbours (nodes and edges) to graph\n      Object.assign(graph.nodes, neighbours.nodes);\n      Object.assign(graph.edges, neighbours.edges);\n\n      if (view && view.isEnabled('show_inter_neighbour_edges')) {\n        const nodeTRefs = this.getTiddlersByIds(neighbours.nodes);\n        // this time we need a whitelist based on the nodeTRefs\n        const toWL = utils.getArrayValuesAsHashmapKeys(nodeTRefs);\n        Object.assign(graph.edges, this.getEdgesForSet(nodeTRefs, toWL));\n      }\n    }\n\n    // this is pure maintainance!\n    removeObsoleteViewData(graph.nodes, view);\n\n    // add styles to nodes\n    this.attachStylesToNodes(graph.nodes, view);\n\n    $tm.stop('Assembling Graph');\n\n    $tm.logger('debug', 'Assembled graph:', graph);\n\n    return graph;\n\n  }\n\n  /**\n   * Returns all edges stored in a given tiddler. Any edge stored in a\n   * tiddler is orginally an outgoing edge. Depending on how the user\n   * changes the arrow head (by manipulating the Visjs edge-type style),\n   * the edge may change its orientation and become an incoming edge or\n   * bi-directional. Therefore, the edges retrieved may be incoming,\n   * outgoing or both!\n   *\n   * Returned edges may be of the following type:\n   *\n   * - Edges stored in the tiddler text (=links).\n   * - Edges stored in fields denoted by magic edge-types.\n   * - TiddlyMap edges stored in a json format\n   *\n   * @param {Tiddler} tiddler - A tiddler reference or object from\n   *     which to retrieve the edges.\n   * @param {Hashmap<TiddlerReference, boolean>} [toWL]\n   *     A hashmap on which basis it is decided, whether to include\n   *     an edge that leads to a certain tiddler in the result or not.\n   *     In this case, all edges stored in the tiddler are treated as\n   *     outgoing and the arrow head is ignored. If not specified,\n   *     all edges are included.\n   * @param {Hashmap<string, boolean>} [typeWL]\n   *     A hashmap on which basis it is decided, whether to include\n   *     an edge of a given type in the result or not. If not\n   *     specified, all edges are included.\n   */\n  getEdges(tiddler, toWL, typeWL) {\n\n    const tObj = utils.getTiddler(tiddler);\n\n    if (!tObj || utils.isSystemOrDraft(tObj)) {\n      return;\n    }\n\n    const { allETy } = this.indeces;\n    const edges = utils.makeHashMap();\n    const eTySubscribers = this.edgeTypeSubscriberRegistry.getAll();\n\n    for (let i = 0, l = eTySubscribers.length; i < l; i++) {\n      Object.assign(edges, (eTySubscribers[i]).loadEdges(tObj, toWL, typeWL));\n    }\n\n    for (let id in edges) {\n\n      const edge = edges[id];\n\n      // check exists for historical reasons...\n      if (!edge.from || !edge.to) {\n        continue;\n      }\n\n      const type = allETy[edge.type] || EdgeType.getInstance(edge.type);\n      addStyleToEdge(edges[id], type);\n\n      edges[id] = edge;\n    }\n\n    return edges;\n\n  }\n\n  /**\n   * The method will return all outgoing edges for a subset of tiddlers.\n   *\n   * @param {Array<Tiddler>} tiddlers - The set of tiddlers to consider.\n   * @param toWL\n   * @param typeWL\n   * @return {Hashmap<Id, Edge>} An edge collection.\n   */\n  getEdgesForSet(tiddlers, toWL, typeWL) {\n\n    const edges = utils.makeHashMap();\n    for (let i = tiddlers.length; i--;) {\n      Object.assign(edges, this.getEdges(tiddlers[i], toWL, typeWL));\n    }\n\n    return edges;\n\n  }\n\n  /**\n   * Select all edges of a given type.\n   *\n   * @param {string|EdgeType} type - Either the edge type id (name) or an EdgeType object.\n   */\n  selectEdgesByType(type) {\n\n    const typeWL = utils.makeHashMap({\n      [EdgeType.getInstance(type).id]: true,\n    });\n\n    return this.getEdgesForSet(this.getAllPotentialNodes(), null, typeWL);\n\n  }\n\n  /**\n   *\n   * @return {*}\n   */\n  getAllPotentialNodes() {\n\n    return utils.getMatches($tm.selector.allPotentialNodes);\n\n  };\n\n  /**\n   * Deletes or renames all edges of a given type.\n   *\n   * @param {string|EdgeType} type - Either the edge type id (name) or an EdgeType object.\n   * @param {('rename'|'delete')} [action='delete']\n   * @param {string} [newName]\n   */\n  _processEdgesWithType(type, { action, newName }) {\n\n    type = EdgeType.getInstance(type);\n\n    $tm.logger('debug', 'Processing edges', type, action);\n\n    // get edges\n    const edges = this.selectEdgesByType(type);\n\n    if (action === 'rename') {\n\n      // clone type first to prevent auto-creation\n      (new EdgeType(newName, type)).save();\n\n    }\n\n    for (let id in edges) {\n\n      this._processEdge(edges[id], 'delete');\n\n      if (action === 'rename') {\n        edges[id].type = newName;\n        this._processEdge(edges[id], 'insert');\n      }\n    }\n\n    // finally remove the old type\n    this.wiki.deleteTiddler(type.fullPath);\n\n  }\n\n  /**\n   * Returns a set of nodes that corresponds to a set of tiddlers.\n   *\n   * @param {TiddlerCollection} tiddlers - A collection of tiddlers.\n   * @param {Hashmap} [addProperties] - a hashmap\n   * @param {CollectionTypeString} [outputType='dataset'] - The result type.\n   *\n   * @return {NodeCollection} A collection of a type specified in the options.\n   */\n  selectNodesByReferences(tiddlers, { addProperties, outputType } = {}) {\n\n    const result = utils.makeHashMap();\n    const keys = Object.keys(tiddlers);\n\n    for (let i = keys.length; i--;) {\n\n      const node = this.makeNode(tiddlers[keys[i]], addProperties);\n      if (node) {\n        result[node.id] = node;\n      }\n\n    }\n\n    return utils.convert(result, outputType);\n\n  }\n\n  /**\n   * Retrieve nodes based on the a list of ids that corrspond to tiddlers\n   * id fields.\n   *\n   * @param {Array.<Id>|Hashmap.<Id, *>|vis.DataSet} nodeIds - The ids of the tiddlers\n   *     that represent the nodes.\n   * @param {Hashmap} [options] - See {@link Adapter#selectNodesByReferences}.\n   * @return {NodeCollection} A collection of a type specified in the options.\n   */\n  selectNodesByIds(nodeIds, options) {\n\n    const tRefs = this.getTiddlersByIds(nodeIds);\n\n    return this.selectNodesByReferences(tRefs, options);\n\n  }\n\n  /**\n   * Select a single node by id.\n   *\n   * @param {Id} id - A node's id\n   * @param {Hashmap} [options]\n   *     Except from the outputType option, all options\n   *     are inherited from {@link Adapter#selectNodesByIds}.\n   * @return {Node|undefined} A node or nothing.\n   */\n  selectNodeById(id, options) {\n\n    options = Object.assign({}, options, { outputType: 'hashmap' });\n    const result = this.selectNodesByIds([ id ], options);\n\n    return result[id];\n\n  }\n\n  /**\n   * Deletes a node type from the system.\n   * @param {NodeType|string} type - the node type id or the actual NodeType\n   */\n  removeNodeType(type) {\n\n    type = NodeType.getInstance(type);\n    this.wiki.deleteTiddler(type.fullPath);\n\n  }\n\n  /**\n   * Gets a Node representation for a tiddler.\n   *\n   * @param {Tiddler} tiddler - the tiddler to represent as node\n   * @param {Object} protoNode - default node properties\n   *\n   * @return {Node|void}\n   */\n  makeNode(tiddler, protoNode) {\n\n    const tObj = utils.getTiddler(tiddler);\n\n    if (!tObj || utils.isSystemOrDraft(tObj)) return;\n\n    // merge(!) so later node manipulations do not affect other nodes\n    const node = utils.merge({}, protoNode);\n\n    // note: assignId() will not assign an id if the tiddler already has one\n    node.id = this.assignId(tObj);\n\n    // add label\n    const label = tObj.fields[$tm.field.nodeLabel];\n    node.label = (label && $tm.field.nodeLabel !== 'title'\n      ? this.wiki.renderText('text/plain', 'text/vnd-tiddlywiki', label)\n      : tObj.fields.title);\n\n    return node;\n\n  }\n\n  /**\n   * Return node styles that are inherited from system styles or node types.\n   *\n   * @param nodes\n   * @return {Object<TiddlerReference, Object>}\n   */\n  getInheritedNodeStyles(nodes) {\n\n    const src = this.getTiddlersByIds(nodes);\n    const protoByTRef = {};\n    const glNTy = this.indeces.glNTy;\n\n    for (let i = glNTy.length; i--;) {\n      const type = glNTy[i];\n\n      let inheritors = [];\n      if (type.id === 'tmap:neighbour') { // special case\n        for (let id in nodes) {\n\n          if (nodes[id].group === 'tmap:neighbour') {\n\n            inheritors.push(this.getTiddlerById(id));\n          }\n        }\n      } else {\n        inheritors = type.getInheritors(src);\n      }\n\n      for (let j = inheritors.length; j--;) {\n        const tRef = inheritors[j];\n        const proto = protoByTRef[tRef] = (protoByTRef[tRef] || {});\n        proto.style = utils.merge(\n          proto.style || {},\n          type.style\n        );\n\n        // ATTENTION: only override proto icons when the type provides\n        // an icon since otherwise we might erase previously\n        // inherited icons.\n        if (type['fa-icon']) {\n          proto['fa-icon'] = type['fa-icon'];\n        } else if (type['tw-icon']) {\n          proto['tw-icon'] = type['tw-icon'];\n        }\n\n      }\n    }\n\n    return protoByTRef;\n\n  }\n\n  /**\n   * Adds styles to nodes.\n   *\n   * @param {Object<string, Node>} nodes\n   * @param {ViewAbstraction|string} view\n   */\n  attachStylesToNodes(nodes, view) {\n\n    view = ViewAbstraction.exists(view) ? new ViewAbstraction(view) : null;\n\n    const inheritedStyles = this.getInheritedNodeStyles(nodes);\n    const viewNodeData = view ? view.getNodeData() : utils.makeHashMap();\n    const isStaticMode = view && !view.isEnabled('physics_mode');\n\n    for (let id in nodes) {\n\n      const tRef = this.getTiddlerById(id);\n      const tObj = this.wiki.getTiddler(tRef);\n      const fields = tObj.fields;\n      const node = nodes[id];\n      let icon;\n\n      // == group styles ==\n\n      const inheritedStyle = inheritedStyles[tRef];\n\n      if (inheritedStyle) {\n\n        utils.merge(node, inheritedStyle.style);\n        icon = getIcon(inheritedStyle['fa-icon'], inheritedStyle['tw-icon']);\n      }\n\n      // == global node styles ==\n\n      // background color\n      if (fields.color) {\n        node.color = fields.color;\n      }\n\n      // global node style from vis editor\n      if (fields['tmap.style']) {\n        utils.merge(node, utils.parseJSON(fields['tmap.style']));\n      }\n\n      icon = getIcon(fields['tmap.fa-icon'], fields['icon']) || icon;\n\n      // == local node styles ==\n\n      // local node style and positions\n\n      const nodeData = viewNodeData[id];\n\n      if (nodeData) {\n\n        utils.merge(node, nodeData);\n        if (isStaticMode) {\n          // fix x if x-position is set; same for y\n          node.fixed = {\n            x: (node.x != null),\n            y: (node.y != null)\n          };\n        }\n\n        icon = getIcon(nodeData['fa-icon'], nodeData['tw-icon']) || icon;\n      }\n\n      // == tweaks ==\n\n      const isColorObject = (node.color !== null && typeof node.color === 'object');\n      // color/border-color may be undefined\n      const color = (isColorObject ? node.color.background : node.color);\n\n      node.color = {\n        background: color,\n        border: (isColorObject ? node.color.border : undefined)\n      };\n\n      // ATTENTION: this function needs to be called after color is assigned\n      addNodeIcon(node, icon);\n\n      // determine font color if not defined via a group- or node-style;\n      // in case of global and local default styles, the user is responsible\n      // him- or herself to adjust the font\n      node.font = node.font || {};\n\n      if (node.shape && !this.visShapesWithTextInside[node.shape]) {\n        node.font.color = 'black'; // force a black color\n      } else if (!node.font.color && color) {\n        node.font.color = getContrastColour(color, color, 'black', 'white');\n      }\n\n      if (node.shape === 'icon' && typeof node.icon === 'object') {\n        node.icon.color = color;\n      }\n\n    }\n\n    if (view) {\n      const node = nodes[view.getConfig('central-topic')];\n      if (node) {\n        utils.merge(node, this.indeces.glNTyById['tmap:central-topic'].style);\n      }\n    }\n\n  }\n\n  /**\n   * This function will remove all tiddlers from the wiki that correspond\n   * to a node in the collection. Drafts are also removed. The default\n   * storylist is updated eventually.\n   * call deleteNode which does the following\n   * 1. get id using IdByT\n   * 2. remove id using adapter.deleteEdgesByTo(idByT[tRef])\n   * 3. remove from all indeces\n   *\n   * @see: https://github.com/Jermolene/TiddlyWiki5/issues/1550\n   *\n   * @param {Node|string} node.\n   */\n  deleteNode(node) {\n\n    if (!node) {\n      return;\n    }\n\n    const id = (typeof node === 'object' ? node.id : node);\n    const tRef = this.getTiddlerById(id);\n\n    // delete tiddler and remove it from the river; this will\n    // automatically remove the global node style and the outgoing edges\n\n    if (tRef) {\n      // checking for tRef is needed;\n      // see: https://github.com/Jermolene/TiddlyWiki5/issues/1919\n      utils.deleteTiddlers([ tRef ]);\n    }\n\n    // delete local node-data in views containing the node\n\n    const viewRefs = utils.getMatches(env.selector.allViews);\n    for (let i = viewRefs.length; i--;) {\n      const view = new ViewAbstraction(viewRefs[i]);\n      view.removeNode(id);\n    }\n\n    // remove obsolete connected edges\n\n    const neighbours = this.getNeighbours([ tRef ]);\n    this.deleteEdges(neighbours.edges);\n\n    // -------------------------------------------\n    // NEVER DELETE AN INDEX THAT ALREADY EXISTED!\n    // -------------------------------------------\n    // Some instances may have cached the index and get confused!\n    // It does not do harm to leave indeces as is since we do not\n    // iterate over them(!) and when a tiddler has the same title or\n    // id as a deleted tiddler, which is highly unlikely, then it will\n    // simply override the index, which is totally fine. The indeces\n    // are refreshed on every boot anyway so it is not a big deal.\n    //\n    // THEREFORE:\n    //\n    // DO NOT DO delete this.tById[id];\n    // DO NOT DO delete this.idByT[tRef];\n\n  }\n\n  /**\n   * Delete all nodes from the system.\n   *\n   * @param {string[]} ids ids\n   */\n  deleteNodes(ids) {\n\n    for (let i = ids.length; i--;) {\n      this.deleteNode(ids[i]);\n    }\n\n  }\n\n  /**\n   * Create a new tiddler that gets a non-existant title and is opened\n   * for edit. If a view is registered, the fields of the tiddler match\n   * the current view. If arguments network and position are specified,\n   * the node is also inserted directly into the graph at the given\n   * position.\n   *\n   * @TODO: Description is obsolete!\n   *\n   * @param {object} node A node object to be inserted\n   * @param {ViewAbstraction|string} view - used to set positions and register the node to\n   * @param {Tiddler} protoTiddler\n   */\n  insertNode(node = {}, view, protoTiddler) {\n\n    // title might has changed after generateNewTitle()\n    node.label = this.wiki.generateNewTitle(node.label || utils.getRandomLabel());\n\n    // add to tiddler store\n    const tObj = new $tw.Tiddler(\n      { text: '' }, // https://github.com/Jermolene/TiddlyWiki5/issues/2025\n      protoTiddler,\n      {\n        title: node.label, // force title\n        'tmap.id': null // force empty id (generated later)\n      },\n      this.wiki.getModificationFields(),\n      this.wiki.getCreationFields()\n    );\n\n    this.wiki.addTiddler(tObj);\n\n    node = this.makeNode(tObj, node);\n\n    if (ViewAbstraction.exists(view)) {\n      (new ViewAbstraction(view)).addNode(node);\n    }\n\n    return node;\n\n  }\n\n  /**\n   * Retrieve tiddlers based on the a list of corresponding ids.\n   *\n   * @param {Array.<Id>|Hashmap.<Id, *>|vis.DataSet} nodeIds - The ids.\n   * @return {Array<TiddlerReference>} The resulting tiddlers.\n   */\n  getTiddlersByIds(nodeIds) {\n\n    // transform into a hashmap with all values being true\n    if (Array.isArray(nodeIds)) {\n      nodeIds = utils.getArrayValuesAsHashmapKeys(nodeIds);\n    } else if (nodeIds instanceof vis.DataSet) {\n      nodeIds = utils.getLookupTable(nodeIds, 'id'); // use id field as key\n    }\n\n    const result = [];\n    for (let id in nodeIds) {\n      const tRef = this.getTiddlerById(id);\n      if (tRef) {\n        result.push(tRef);\n      }\n    }\n\n    return result;\n\n  }\n}\n\n/**** Helper *******************************************************/\n\n/**\n * Returns the short symbol identifier (`&#xf2bc;` → `f206`).\n *\n * @param str FontAwesome id\n * @return {string}\n */\nconst getFAdigits = (str) => (str.length === 4 ? str : str.substr(3, 4));\n\n/**\n * Adds an icon to the specified node.\n *\n * @param {Node} node\n * @param {Object} icon\n */\nconst addNodeIcon = (node, icon) => {\n\n  if (!icon) {\n    return;\n  }\n\n  // Font Awesome style\n\n  if (icon.fa) {\n\n    node.shape = 'icon';\n    node.icon = {\n      shape: 'icon',\n      face: 'FontAwesome',\n      color: node.color,\n      code: String.fromCharCode('0x' + getFAdigits(icon.fa)),\n    };\n\n    if (node.size) {\n      node.icon.size = node.size;\n    }\n\n    return;\n  }\n\n  // TiddlyWiki stored icons\n\n  if (icon.tw) {\n\n    const imgTObj = utils.getTiddler(icon.tw);\n\n    if (!imgTObj) {\n      return;\n    }\n\n    if (imgTObj.fields['_canonical_uri']) { // image is a url address\n\n      node.image = imgTObj.fields['_canonical_uri'];\n      node.shape = 'image';\n\n    } else if (imgTObj.fields.text) {\n\n      node.image = utils.getDataUri(imgTObj);\n      node.shape = 'image';\n    }\n  }\n\n};\n\n/**\n * Garbage collector for obsolete node data.\n *\n * @param {Object<string, Node>} nodes\n * @param {ViewAbstraction|string} view\n */\nconst removeObsoleteViewData = (nodes, view) => {\n\n  if (!ViewAbstraction.exists(view) || !nodes) {\n    return;\n  }\n\n  view = new ViewAbstraction(view);\n\n  const data = view.getNodeData();\n\n  let obsoleteDataItems = 0;\n  for (let id in data) {\n    if (nodes[id] === undefined && data[id] != null) {\n      // we only set this to undefined as deletion would\n      // slow down V8, however, this necessarily requires\n      // a safeguard agains recursion: data[id] != null\n\n      data[id] = undefined;\n      obsoleteDataItems++;\n    }\n  }\n\n  if (obsoleteDataItems) {\n    $tm.logger('debug', '[Cleanup]',\n      'Removed obsolete node data:',\n      view.getLabel(), obsoleteDataItems);\n    view.saveNodeData(data);\n  }\n\n};\n\n/**\n * Sets up an edge object that is ready to be consumed by vis.\n *\n * @param {Edge} edge\n * @param {EdgeType} type\n */\nconst addStyleToEdge = (edge, type) => {\n\n  edge = Object.assign(edge, type.style);\n\n  if (utils.isTrue(type['show-label'], true)) {\n    edge.label = type.getLabel();\n  }\n\n};\n\nconst getIcon = (faIcon, twIcon) => faIcon && { fa: faIcon } || twIcon && { tw: twIcon };\n\n/*** Exports *******************************************************/\n\nexport default Adapter;\n"],"sourceRoot":"../../../../../../src/plugins"}