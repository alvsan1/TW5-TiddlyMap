{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Caretaker.js"],"names":["env","init","window","$tm","utils","url","location","href","cleanup","registerPublicClasses","updateGlobals","createMetaFile","logger","indeces","attachIndeces","services","getInitializedServices","Object","assign","loadDefaultView","config","sys","defaultView","fixer","fix","registry","setInterval","routineCheck","registerChangeListener","callbackManager","registerMousemoveListener","registerClickListener","query","prepareFullscreenStart","tracker","handler","$tw","modules","applyMethods","edgeTypeSubscriberRegistry","allETy","adapter","dialogManager","glNTy","parent","keycharm","NodeType","EdgeType","ViewAbstraction","attachOptions","p","makeHashMap","merge","unflatten","wiki","getTiddlerData","ref","sysUserConf","vis","parseFieldData","visUserConf","field","extend","start","updateNodeTypesIndeces","updateEdgeTypesIndeces","stop","typePath","path","nodeTypes","glNTyById","eachTiddlerPlusShadows","tObj","tRef","startsWith","type","getInstance","id","push","sort","a","b","priority","edgeTypes","et","updateIndex","attachFunctions","fn","nirvana","isTrue","debug","console","arguments","length","args","Array","prototype","slice","call","arg1","shift","hasOwnProperty","apply","timerName","time","timeEnd","notify","notifications","i","widget","destruct","isZombieWidget","splice","dispatchUpdates","update","updates","checkForClone","tRefs","getDublicates","setField","undefined","assignId","open","param","changedTiddler","fields","title","filter","joinAndWrap","getId","lastCurrentTiddler","updateLiveViewTrigger","changedTiddlers","getField","printChanges","loopCount","c","deleted","getTiddler","mouse","evt","addEventListener","tempPopups","popupStates","getTiddlersByPrefix","getText","hasClass","target","getAncestorWithClass","setText","refresh","isDraft","isHandled","handleTiddlerChange","rebuilders","options","isSystemTiddler","text","dispatchEvent","getIdByTiddler","tRefWithId","getTiddlerWithField","deleteNode","deleteByPrefix","defaultViewHolder","mainEditor","setSidebarTab","exists","view","getLabel","tiddlerExists","sysMeta","plugin","pluginRoot","setTiddlerData","originalVersion","version","dataStructureState","showWelcomeMessage","name","platforms","after","before","synchronous","startup"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Caretaker.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/startup/caretaker\ntype: application/javascript\nmodule-type: startup\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport visConfig                  from '$:/plugins/felixhayashi/tiddlymap/js/config/vis';\nimport utils                      from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport Fixer                      from '$:/plugins/felixhayashi/tiddlymap/js/Fixer';\nimport Adapter                    from '$:/plugins/felixhayashi/tiddlymap/js/Adapter';\nimport Tracker                    from '$:/plugins/felixhayashi/tiddlymap/js/services/tracker';\nimport EdgeTypeSubscriberRegistry from '$:/plugins/felixhayashi/tiddlymap/js/EdgeTypeSubscriberRegistry';\nimport DialogManager              from '$:/plugins/felixhayashi/tiddlymap/js/DialogManager';\nimport CallbackManager            from '$:/plugins/felixhayashi/tiddlymap/js/CallbackManager';\nimport ViewAbstraction            from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType                   from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport NodeType                   from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport vis                        from '$:/plugins/felixhayashi/vis/vis.js';\nimport * as env                   from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\nimport URL                        from '$:/plugins/felixhayashi/tiddlymap/js/URL';\n\n/*** Code **********************************************************/\n\n/**\n * This module is responsible for registering a global namespace\n * under $tw and loading (and refreshing) the configuration and services.\n *\n * Attention: Careful with the order of the function calls in this\n * functions body!\n *\n */\nconst init = () => {\n\n  window.$tm = { ...env, utils, url: new URL(window.location.href) };\n\n  // cleanup previous session\n  cleanup();\n\n  registerPublicClasses($tm);\n\n  // build and integrate global options\n  updateGlobals($tm);\n\n  // register meta file (if not done yet)\n  createMetaFile($tm.logger);\n\n  // create indeces\n  const indeces = attachIndeces($tm);\n\n  // create services\n  const services = getInitializedServices(indeces);\n  Object.assign($tm, services);\n\n  // load defaults\n  loadDefaultView($tm.config.sys.defaultView);\n\n  // Run the fixer to update older wikis\n  services.fixer.fix();\n\n  // all graphs need to register here. @see routineWalk()\n  $tm.registry = [];\n  setInterval(routineCheck, 5000);\n\n  // AT THE VERY END: register change listener with the callback manager\n  registerChangeListener($tm.callbackManager);\n\n  // register DOM listeners\n  registerMousemoveListener();\n  registerClickListener();\n\n  // check for fullscreen directives\n  if ($tm.url.query['tmap-enlarged']) {\n    prepareFullscreenStart($tm.url);\n  }\n\n  // issue notification\n  $tm.logger('warn', 'TiddlyMap\\'s caretaker successfully started');\n\n};\n\n/**\n * Injects dependencies and registers services\n *\n * @param indeces\n * @return Object\n */\nconst getInitializedServices = indeces => {\n\n  const tracker = new Tracker(fixer);\n\n  // inject modules\n  const handler = $tw.modules.applyMethods('tmap.edgetypehandler');\n  const edgeTypeSubscriberRegistry = new EdgeTypeSubscriberRegistry(\n    handler,\n    indeces.allETy,\n    tracker\n  );\n\n  // attach the adapter object to the tiddlymap namespace\n  const adapter = new Adapter(\n    tracker,\n    edgeTypeSubscriberRegistry\n  );\n\n  const callbackManager = new CallbackManager();\n  const dialogManager = new DialogManager(callbackManager);\n\n  const fixer = new Fixer(adapter, $tm.logger, indeces.glNTy)\n\n  return {\n    edgeTypeSubscriberRegistry,\n    tracker,\n    adapter,\n    callbackManager,\n    dialogManager,\n    fixer,\n  };\n\n};\n\n/**\n * make classes available for console users\n */\nconst registerPublicClasses = (parent) => {\n  parent.keycharm = vis.keycharm;\n  parent.NodeType = NodeType;\n  parent.EdgeType = EdgeType;\n  parent.ViewAbstraction = ViewAbstraction;\n};\n\n/**\n * This function will append the global options to the tree. In case\n * this function is called again, only the option leafs are rebuild\n * so a process may safely store a reference to a branch of the option\n * tree as the reference doesn't change.\n *\n * ATTENTION: For the path options, no trailing or double slashes!\n * This is NOT unix where paths are normalized (// is not rewritten to /).\n *\n * @see\n *   - [TW5] Is there a designated place for TW plugins to store stuff in the dom?\n *     https://groups.google.com/forum/#!topic/tiddlywikidev/MZZ37XiVcvY\n * @param {object} parent The root where to insert the options into\n */\nvar attachOptions = function(parent) {\n\n  var p = parent;\n\n  // default configurations mixed with user config\n  if (!p.config) p.config = utils.makeHashMap();\n\n  // Never modify the imported config objects; instead, merge them\n  // into a new object\n\n  // attention! it is a tw-data-tiddler!\n  p.config.sys = utils.merge(\n    p.config.sys,\n    utils.unflatten($tw.wiki.getTiddlerData(env.ref.sysUserConf))\n  );\n\n  // CAREFUL: Never merge directly into the default vis config object\n  p.config.vis = utils.merge(\n    {}, visConfig, utils.parseFieldData(env.ref.visUserConf)\n  );\n\n  // a shortcut for fields property\n  if (!p.field) p.field = utils.makeHashMap();\n  $tw.utils.extend(p.field, p.config.sys.field);\n\n};\n\n/**\n * This function will cache/index some tiddler properties as javascript\n * objects for faster access.\n */\nconst attachIndeces = (parent) => {\n\n  $tm.start('Attaching Indeces');\n\n  parent.indeces = parent.indeces || {};\n\n  updateNodeTypesIndeces(parent.indeces);\n  updateEdgeTypesIndeces(parent.indeces);\n\n  $tm.stop('Attaching Indeces');\n\n  return parent.indeces;\n\n};\n\n/**\n * For faster access to node-type styles, we store all node-type\n * objects as indeces in a table.\n *\n * Types without a filter are not indexed since they are either\n * special types that TiddlyMap manually assignes (e.g. tmap:neighbour,\n * or tmap:selected).\n *\n * Indeces added to the indeces chain:\n * 1. glNTy – all global node types\n *\n * @param {Object} [parent] - The global indeces object indeces.\n *     If not stated, $tm.indeces is used.\n * @param {Array<TiddlerReference>} [allTiddlers] - The tiddlers to\n *     use as basis for this index. If not stated, all tiddlers in\n *     the wiki are used.\n */\nvar updateNodeTypesIndeces = function(parent) {\n\n  parent = parent || $tm.indeces;\n\n  var typePath = $tm.path.nodeTypes;\n  var glNTy = parent.glNTy = [];\n  var glNTyById = parent.glNTyById = utils.makeHashMap();\n\n  $tw.wiki.eachTiddlerPlusShadows(function(tObj, tRef) {\n    if (utils.startsWith(tRef, typePath)) {\n      var type = NodeType.getInstance(tRef);\n      glNTyById[type.id] = type;\n      glNTy.push(type);\n    }\n  });\n\n  glNTy.sort(function(a, b) {\n    return a.priority - b.priority;\n  });\n\n};\n\nvar updateEdgeTypesIndeces = function(parent) {\n\n  parent = parent || $tm.indeces;\n\n  var typePath = $tm.path.edgeTypes;\n  var allETy = parent.allETy = utils.makeHashMap();\n\n  $tw.wiki.eachTiddlerPlusShadows(function(tObj, tRef) {\n\n    if (utils.startsWith(tRef, typePath)) {\n\n      var et = EdgeType.getInstance(tRef);\n      allETy[et.id] = et;\n\n    }\n\n  });\n\n  if ($tm.edgeTypeSubscriberRegistry) {\n    $tm.edgeTypeSubscriberRegistry.updateIndex(allETy);\n  }\n\n};\n\n/**\n * This function attaches all the top level functions to the\n * tiddlymap namespace.\n *\n * This will add the\n * 1. global logger method,\n * 2. the notify method\n * 3. the stopwatch methods `start` and `stop`.\n *\n * @param {Hashmap} parent - The parent object to attach the options to.\n */\nvar attachFunctions = function(parent) {\n\n  var fn = parent;\n  var nirvana = function() { /* /dev/null */ };\n\n  if (utils.isTrue($tm.config.sys.debug, false) && console) {\n\n    /**\n     * A logging mechanism that uses the first argument as type and\n     * passes all consequent arguments as console arguments. The\n     * reason for this functions existence is to be able to switch\n     * off the logging without redirecting every single console function\n     * such as log, debug, warn etc. Plus, we have more control over\n     * the logging.\n     *\n     * @see http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n     * @see http://stackoverflow.com/questions/9521921/why-does-console-log-apply-throw-an-illegal-invocation-error\n     *\n     * @param {string} type - The type of the message (debug, info, warning…)\n     *     which is exactly the same as in `console[type]`.\n     * @param {...*} message - An infinite number of arguments to be printed\n     *     (just like console).\n     */\n    fn.logger = function(/* type, [messages,] messages */) {\n      if (arguments.length < 2) return;\n      var args = Array.prototype.slice.call(arguments);\n      var arg1 = args.shift(args);\n      var type = (console.hasOwnProperty(arg1) ? arg1 : 'debug');\n      console[type].apply(console, args);\n    };\n\n    fn.start = function(timerName) {\n      console.time('[timer] ' + timerName);\n    };\n\n    fn.stop = function(timerName) {\n      console.timeEnd('[timer] ' + timerName);\n    };\n\n  } else {\n\n    fn.logger = fn.start = fn.stop = nirvana;\n\n  }\n\n  fn.notify = (utils.isTrue($tm.config.sys.notifications) ? utils.notify : nirvana);\n\n};\n\n/**\n * This periodic check is needed to trigger a cleanup if a graph is\n * removed since a graph itself cannot react to its destruction.\n * This includes removing listeners that were not attached to the\n * local container or calling the vis destructor.\n *\n * @todo Specify which functions are required for widgets that register\n * themselves in the registry.\n */\nvar routineCheck = function() {\n\n  for (var i = $tm.registry.length; i--;) {\n    var widget = $tm.registry[i];\n\n    if (!widget.destruct || !widget.isZombieWidget) return; // no duck!\n\n    if (widget.isZombieWidget()) { // removed!\n      $tm.logger('warn', 'a widget will be removed');\n      $tm.registry.splice(i, 1);\n      widget.destruct();\n    }\n  }\n\n};\n\n/**\n * Every widget that has registered itself in the registry\n * will receive the `updates` object. The `updates` object is a more\n * advanced\n *\n * @param {Updates} updates\n */\nconst dispatchUpdates = updates => {\n\n  const registry = $tm.registry;\n  for (let i = registry.length; i--;) {\n\n    const widget = registry[i];\n\n    if (widget.update && (widget.isZombieWidget && !widget.isZombieWidget())) {\n      widget.update(updates);\n    }\n  }\n\n};\n\n/**\n * We need to do this check as TiddlyWiki does not allow us to hook into the\n * clone process to find out whether a node was cloned.\n *\n * @param tObj\n */\nconst checkForClone = tObj => {\n\n  const tRefs = utils.getDublicates(tObj);\n\n  if (!tRefs.length) {\n    return;\n  }\n\n  // remove any defined edges\n  utils.setField(tObj, 'tmap.edges', undefined);\n\n  // force override id\n  $tm.tracker.assignId(tObj, true);\n\n  // inform the user about what we did\n  $tm.dialogManager.open('dublicateIdInfo', {\n    param: {\n      changedTiddler: tObj.fields.title,\n      filter : utils.joinAndWrap(tRefs, '[[', ']]'),\n      id: utils.getId(tObj),\n    }\n  });\n\n\n};\n\n/**\n * Builds and registers globals and the functions that depend on them.\n */\nconst updateGlobals = parent => {\n\n  attachOptions($tm);\n  attachFunctions($tm);\n\n  // attention: logger() cannot be called before functions are rebuild\n  $tm.logger('warn', 'Rebuilt globals');\n\n};\n\nvar lastCurrentTiddler = null;\nvar updateLiveViewTrigger = function(changedTiddlers) {\n\n  if (changedTiddlers['$:/HistoryList']) {\n    var tRef = utils.getField('$:/HistoryList', 'current-tiddler');\n  } else if (changedTiddlers['$:/temp/focussedTiddler']) {\n    var tRef = utils.getField('$:/temp/focussedTiddler', 'text');\n  }\n\n  if (tRef != null && lastCurrentTiddler !== tRef) {\n    lastCurrentTiddler = tRef;\n    utils.setField('$:/temp/tmap/currentTiddler', 'text', tRef);\n  }\n\n};\n\n/**\n * Only for debugging\n */\nvar printChanges = function(changedTiddlers, loopCount) {\n\n  if (!utils.isTrue($tm.config.sys.debug, false)) return;\n\n  $tm.logger('warn', '=== Refresh ' + loopCount + ' ===');\n\n  for (var tRef in changedTiddlers) {\n\n    var c = changedTiddlers[tRef].deleted ? '[Deleted]' : '[Modified]';\n\n    $tm.logger('warn', c, tRef, $tw.wiki.getTiddler(tRef));\n  }\n\n};\n\n/**\n * Saves the last mousemove event under $tm.mouse\n */\nvar registerMousemoveListener = function() {\n\n  $tm.mouse = {};\n\n  var fn = function(evt) { $tm.mouse = evt; };\n  window.addEventListener('mousemove', fn, false);\n\n};\n\n/**\n * @TODO: suggest this to Jeremy for TW popup handling\n */\nvar registerClickListener = function() {\n\n  var tempPopups = $tm.path.tempPopups;\n  window.addEventListener('click', function(evt) {\n\n    var popupStates = utils.getTiddlersByPrefix(tempPopups);\n\n    for (var i = popupStates.length; i--;) {\n      if (utils.getText(popupStates[i])) break;\n    }\n\n    if (i === -1) return;\n\n    if (!$tw.utils.hasClass(evt.target, 'tc-drop-down')\n       && !utils.getAncestorWithClass(evt.target, 'tc-drop-down')) {\n    // = clicked on an element that isn't a dropdown or inside one\n      for (var i = popupStates.length; i--;) {\n        utils.setText(popupStates[i], '');\n      }\n    }\n\n  }, false);\n};\n\n/**\n * Registers a change listener that will dispatch\n * @param callbackManager\n */\nconst registerChangeListener = callbackManager => {\n\n  let loopCount = 0;\n\n  $tw.wiki.addEventListener('change', changedTiddlers => {\n\n    $tm.start('Caretaker handling changes');\n\n    printChanges(changedTiddlers, loopCount++);\n    callbackManager.refresh(changedTiddlers);\n\n    const updates = { changedTiddlers: {} };\n\n    for (let tRef in changedTiddlers) {\n\n      const tObj = utils.getTiddler(tRef);\n\n      if (tObj && tObj.isDraft()) {\n        continue;\n      }\n\n      const isHandled = handleTiddlerChange(tRef, tObj, updates);\n\n      if (isHandled) {\n        updates.changedTiddlers[tRef] = changedTiddlers[tRef];\n      }\n    }\n\n    dispatchUpdates(updates);\n\n    // NOTE: changes will affect the next refresh cycle\n    updateLiveViewTrigger(changedTiddlers);\n\n    $tm.stop('Caretaker handling changes');\n\n  });\n\n};\n\n/**\n * Mapping of paths and callbacks that should be invoked if tiddlers\n * within theses paths change.\n */\nconst rebuilders = {\n  [env.path.options]: updateGlobals,\n  [env.path.nodeTypes]: updateNodeTypesIndeces,\n  [env.path.edgeTypes]: updateEdgeTypesIndeces,\n};\n\n/**\n * This function will deal with tiddler changes and will log changes\n * to the provided `updates` object.\n *\n * @param {TiddlerReference} tRef\n * @param {$tw.Tiddler} tObj\n * @param {Updates} updates\n */\nconst handleTiddlerChange = (tRef, tObj, updates) => {\n\n  if ($tw.wiki.isSystemTiddler(tRef)) {\n\n    for (let path in rebuilders) {\n      if (utils.startsWith(tRef, path) && !updates[path]) {\n        $tm.logger('warn', '[System change]', path);\n        rebuilders[path]();\n        updates[path] = true;\n      }\n    }\n\n  } else if (tObj) { // created or modified\n\n    if (tObj.fields.text === undefined) { // sic; '' is ok\n      // to make sure that the tiddler's body is fully loaded\n      // we postpone the handling of the tiddler\n      // see https://github.com/felixhayashi/TW5-TiddlyMap/issues/222#issuecomment-268978764\n      $tw.wiki.dispatchEvent('lazyLoad', tRef);\n\n      return false;\n    }\n\n    checkForClone(tObj);\n\n    // call assignId IN ANY CASE to make sure the index\n    // stays intact, also after a renaming operation\n    $tm.tracker.assignId(tObj);\n\n  } else { // deleted or renamed\n\n    const id = $tm.tracker.getIdByTiddler(tRef);\n\n    if (!id) { // ignore tiddler without id\n      return false;\n    }\n\n    const tRefWithId = utils.getTiddlerWithField('tmap.id', id);\n\n    if (tRefWithId) { // only renamed\n\n      $tm.logger('warn', '[Renamed]', tRef, 'into', tRefWithId);\n\n    } else { // removed\n\n      // remove node; any edges pointing in/out; update indeces\n      // CAREFUL with recursion here!\n      $tm.adapter.deleteNode(id);\n\n    }\n  }\n\n  return true;\n\n};\n\n/**\n * Remove temp files from previous session.\n */\nconst cleanup = () => {\n\n  utils.deleteByPrefix('$:/temp/felixhayashi');\n  utils.deleteByPrefix('$:/temp/tiddlymap');\n  utils.deleteByPrefix('$:/temp/tmap');\n\n};\n\n/**\n * Register the view that should be displayed at startup.\n */\nconst loadDefaultView = defaultView => {\n\n  if (defaultView) {\n    utils.setText(env.ref.defaultViewHolder, $tm.config.sys.defaultView);\n  }\n\n};\n\n/**\n * Init the wiki so we can start the main editor with the specified\n * view in fullscreen mode.\n *\n * @param {ViewAbstraction|string} view\n */\nconst prepareFullscreenStart = view => {\n\n  const { mainEditor, defaultViewHolder } = env.ref;\n\n  utils.setSidebarTab(mainEditor);\n\n  if (ViewAbstraction.exists(view)) {\n    view = new ViewAbstraction(view);\n    utils.setField(defaultViewHolder, 'text', view.getLabel());\n  }\n\n};\n\n/**\n * The meta file keeps track of installation data.\n */\nconst createMetaFile = (logger) => {\n\n  if (utils.tiddlerExists(env.ref.sysMeta)) {\n    return;\n  }\n\n  logger('warn', 'Creating meta file');\n\n  const plugin = $tw.wiki.getTiddler(env.path.pluginRoot);\n\n  $tw.wiki.setTiddlerData(env.ref.sysMeta, {\n    // the version originally installed\n    originalVersion: plugin.fields.version,\n    // the data structure in use corresponds to version x\n    // if the structure is obsolete, it will be automatically\n    // fixed by the fixer module.\n    dataStructureState: '0.6.9',\n    // whether or not to display a welcome message\n    showWelcomeMessage: true\n  });\n\n};\n\n/*** Exports *******************************************************/\n\nexport const name = 'tmap.caretaker';\nexport const platforms = [ 'browser' ];\nexport const after = [ 'startup' ];\nexport const before = [ 'rootwidget' ];\nexport const synchronous = true;\nexport const startup = init;\n"],"sourceRoot":"../../../../../../src/plugins"}