{"version":3,"sources":["felixhayashi/tiddlymap/js/services/Fixer.js"],"names":["env","Fixer","adapter","logger","glNTy","wiki","$tw","path","view","matches","getTiddlersByPrefix","i","length","type","getBasename","getInstance","exists","save","edges","getTiddlerData","j","id","insertEdge","deleteTiddler","toVersion","curVersion","upgrade","isLeftVersionGreater","msg","setEntry","ref","sysMeta","meta","executeUpgrade","dataStructureState","originalVersion","userConf","nodeIdField","getEntry","moveFieldValues","moveEdges","filter","selector","allViews","viewRefs","getMatches","getRoot","liveView","setNodeFilter","setConfig","utils","stringifyList","confRef","visUserConf","unflatten","groups","setStyle","setTiddlerData","fixId","liveTab","getTiddler","hasTag","setField","views","eTyFilter","getEdgeTypeFilter","confKey","getConfig","f","defaultEdgeTypeFilter","edgeTypePath","edgeTypes","replaceAll","setEdgeTypeFilter"],"mappings":"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","file":"../../../../../felixhayashi/tiddlymap/js/services/Fixer.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/Fixer\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\n/*** Imports *******************************************************/\n\nimport utils           from '$:/plugins/felixhayashi/tiddlymap/js/utils';\nimport ViewAbstraction from '$:/plugins/felixhayashi/tiddlymap/js/ViewAbstraction';\nimport EdgeType        from '$:/plugins/felixhayashi/tiddlymap/js/EdgeType';\nimport NodeType        from '$:/plugins/felixhayashi/tiddlymap/js/NodeType';\nimport * as env        from '$:/plugins/felixhayashi/tiddlymap/js/lib/environment';\n\n/*** Code **********************************************************/\n\nclass Fixer {\n\n  /**\n   * @param {Adapter} adapter\n   * @param {Object} logger\n   * @param {Object} glNTy\n   */\n  constructor(adapter, logger, glNTy) {\n\n    this.adapter = adapter;\n    this.logger = logger;\n    this.wiki = $tw.wiki;\n    this.glNTy = glNTy;\n\n  }\n\n  moveEdges(path, view) {\n\n    const matches = utils.getTiddlersByPrefix(path);\n    for (let i = 0; i < matches.length; i++) {\n\n      // create edge type\n      let type = utils.getBasename(matches[i]);\n\n      if (type === '__noname__') {\n        type = 'tmap:unknown';\n      }\n\n      type = EdgeType.getInstance(type);\n\n      if (!type.exists()) {\n        type.save();\n      }\n\n      // move edges\n      const edges = this.wiki.getTiddlerData(matches[i]);\n      for (let j = 0; j < edges.length; j++) {\n        // prefix formerly private edges with view name as namespace\n        edges[j].type = (view ? view + ':' : '') + type.id;\n        this.adapter.insertEdge(edges[j]);\n      }\n\n      // finally remove the store\n      this.wiki.deleteTiddler(matches[i]);\n\n    }\n\n  }\n\n  executeUpgrade(toVersion, curVersion, upgrade) {\n\n    if (!utils.isLeftVersionGreater(toVersion, curVersion)) {\n      // = current data structure version is newer than version we want to upgrade to.\n      return;\n    }\n\n    // issue debug message\n    this.logger('debug', `Upgrading data structure to ${toVersion}`);\n    // execute fix\n    const msg = upgrade();\n    // update meta\n    utils.setEntry(env.ref.sysMeta, 'dataStructureState', toVersion);\n\n    return msg;\n\n  };\n\n  /**\n   * Special fix that is not invoked along with the other fixes but\n   * when creating the index (see caretaker code).\n   *\n   * Changes:\n   * 1. The node id field is moved to tmap.id if **original version**\n   *    is below v0.9.2.\n   */\n  fixId() {\n\n    const meta = this.wiki.getTiddlerData(env.ref.sysMeta, {});\n\n    this.executeUpgrade('0.9.2', meta.dataStructureState, () => {\n\n      if (utils.isLeftVersionGreater('0.9.2', meta.originalVersion)) {\n        // path of the user conf at least in 0.9.2\n        const userConf = '$:/plugins/felixhayashi/tiddlymap/config/sys/user';\n        const nodeIdField = utils.getEntry(userConf, 'field.nodeId', 'tmap.id');\n        utils.moveFieldValues(nodeIdField, 'tmap.id', true, false);\n      }\n    });\n\n  };\n\n  fix() {\n\n    const meta = this.wiki.getTiddlerData(env.ref.sysMeta, {});\n\n    this.logger('debug', 'Fixer is started');\n    this.logger('debug', 'Data-structure currently in use: ', meta.dataStructureState);\n\n    /**\n     * Changes:\n     * 1. Edges are stored in tiddlers instead of type based edge stores\n     * 2. No more private views\n     */\n    this.executeUpgrade('0.7.0', meta.dataStructureState, () => {\n\n      // move edges that were formerly \"global\"\n      this.moveEdges('$:/plugins/felixhayashi/tiddlymap/graph/edges', null);\n\n      // move edges that were formerly bound to view (\"private\")\n      const filter = env.selector.allViews;\n      const viewRefs = utils.getMatches(filter);\n      for (let i = 0; i < viewRefs.length; i++) {\n        const view = new ViewAbstraction(viewRefs[i]);\n        this.moveEdges(`${view.getRoot()}/graph/edges`, view);\n      }\n\n    });\n\n    /**\n     * Changes:\n     * 1. Changes to the live view filter and refresh trigger field\n     */\n    this.executeUpgrade('0.7.32', meta.dataStructureState, () => {\n\n      if (!ViewAbstraction.exists('Live View')) {\n\n        return;\n      }\n\n      const liveView = new ViewAbstraction('Live View');\n\n      // Only listen to the current tiddler of the history list\n      liveView.setNodeFilter('[field:title{$:/temp/tmap/currentTiddler}]', true);\n\n      liveView.setConfig({\n        'refresh-trigger': null, // delete the field (renamed)\n        'refresh-triggers': $tw.utils.stringifyList([ '$:/temp/tmap/currentTiddler' ]),\n      });\n\n    });\n\n    /**\n     * Changes:\n     * 1. Group styles for matches and neighbours are now modulized\n     *    and stored as node-types.\n     * 2. vis user configuration is restored unflattened!\n     *    The user only interacts through the GUI.\n     * 3. If the node id field was \"id\" it is moved to tmap.id\n     */\n    this.executeUpgrade('0.9.0', meta.dataStructureState, () => {\n\n      const confRef = env.ref.visUserConf;\n      const userConf = utils.unflatten(this.wiki.getTiddlerData(confRef, {}));\n\n      if (typeof userConf.groups === 'object') {\n\n        const type = NodeType.getInstance('tmap:neighbour');\n        type.setStyle(userConf.groups[ 'neighbours' ]);\n        type.save();\n\n        delete userConf.groups;\n        this.wiki.setTiddlerData(confRef, userConf);\n\n      }\n\n    });\n\n    /**\n     * Changes:\n     * 1. The node id field is moved to tmap.id if **original version**\n     *    is below v0.9.2.\n     */\n    this.fixId();\n\n\n    /**\n     * This will ensure that all node types have a prioritization field\n     * set.\n     */\n    this.executeUpgrade('0.9.16', meta.dataStructureState, () => {\n\n      for (let i = this.glNTy.length; i--;) {\n        this.glNTy[i].save(null, true);\n      }\n\n    });\n\n    /**\n     * Fixes the live tab\n     */\n    this.executeUpgrade('0.10.3', meta.dataStructureState, function () {\n\n      const liveTab = env.ref.liveTab;\n      if (utils.getTiddler(liveTab).hasTag('$:/tags/SideBar')) {\n        this.wiki.deleteTiddler(liveTab);\n        utils.setField(liveTab, 'tags', '$:/tags/SideBar');\n      }\n\n    });\n\n    /**\n     * 1) Fixes the edge type filter. Before, an empty filter was\n     * treated as default filter, i.e. no links and tags shown.\n     * Now an empty filter means that we show all edge types.\n     *\n     * 2) Adds prefix to hide private edges per default\n     *\n     * 3) Corrects view-namespaces (formerly stored with colon).\n     *\n     */\n    this.executeUpgrade('0.11.0', meta.dataStructureState, function () {\n\n      const views = utils.getMatches(env.selector.allViews);\n\n      for (let i = views.length; i--;) {\n\n        const view = new ViewAbstraction(views[i]);\n        let eTyFilter = view.getEdgeTypeFilter('raw');\n        const confKey = 'edge_type_namespace';\n        view.setConfig(confKey, view.getConfig(confKey));\n\n        let f = env.filter.defaultEdgeTypeFilter;\n\n        if (eTyFilter) {\n\n          // remove any occurences of the egde type path prefix\n          const edgeTypePath = env.path.edgeTypes;\n          eTyFilter = utils.replaceAll(eTyFilter, '', [\n            edgeTypePath,\n            edgeTypePath + '/',\n            '[prefix[' + edgeTypePath + ']]',\n            '[prefix[' + edgeTypePath + '/]]',\n            [ '[suffix[tw-body:link]]', '[[tw-body:link]]' ],\n            [ '[suffix[tw-list:tags]]', '[[tw-list:tags]]' ],\n            [ '[suffix[tw-list:list]]', '[[tw-body:list]]' ],\n            [ '[suffix[tmap:unknown]]', '[[tmap:unknown]]' ],\n            [ '[suffix[unknown]]', '[[tmap:unknown]]' ],\n          ]);\n\n          f = '-[prefix[_]] ' + eTyFilter;\n\n        }\n\n        view.setEdgeTypeFilter(f);\n      }\n\n    });\n\n  };\n}\n\n/*** Exports *******************************************************/\n\nexport default Fixer;\n\n"],"sourceRoot":"../../../../../../src/plugins"}