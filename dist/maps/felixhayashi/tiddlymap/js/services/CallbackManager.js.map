{"version":3,"sources":["felixhayashi/tiddlymap/js/services/CallbackManager.js"],"names":["CallbackManager","callbacks","makeHashMap","logger","$tm","wiki","$tw","tRef","callback","isDeleteOnCall","execute","refOrRefList","i","length","changedTiddlers","getTiddler","remove"],"mappings":";;;;;;qjBAAA;AACA;;;;;;;;;;AAUA;;;;;;;;AAEA;;;IAGMA,e;AAEJ,6BAAc;AAAA;;AACZ,SAAKC,SAAL,GAAiB,gBAAMC,WAAN,EAAjB;AACA,SAAKC,MAAL,GAAcC,IAAID,MAAlB;AACA,SAAKE,IAAL,GAAYC,IAAID,IAAhB;AACD;;AAED;;;;;;;;;;;;;;;;wBAYIE,I,EAAMC,Q,EAAiC;AAAA,UAAvBC,cAAuB,uEAAN,IAAM;;;AAEzC,WAAKN,MAAL,CAAY,OAAZ,iDAAkEI,IAAlE;AACA,WAAKN,SAAL,CAAeM,IAAf,IAAuB;AACrBG,iBAASF,QADY;AAErBC;AAFqB,OAAvB;AAKD;;;;;AAED;;;2BAGOE,Y,EAAc;;AAEnB,UAAI,CAACA,YAAL,EAAmB;AACjB;AACD;;AAED,UAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC;AACpCA,uBAAe,CAAEA,YAAF,CAAf;AACD;;AAED,WAAK,IAAIC,IAAID,aAAaE,MAA1B,EAAkCD,GAAlC,GAAwC;AACtC,YAAML,OAAOI,aAAaC,CAAb,CAAb;AACA,YAAI,KAAKX,SAAL,CAAeM,IAAf,CAAJ,EAA0B;AACxB,eAAKJ,MAAL,CAAY,OAAZ,8BAA+CI,IAA/C;AACA,iBAAO,KAAKN,SAAL,CAAeM,IAAf,CAAP;AACD;AACF;AAEF;;;;;AAED;;;;;;;4BAOQO,e,EAAiB;;AAEvB,UAAI,KAAKb,SAAL,CAAeY,MAAf,IAAyB,CAA7B,EAAgC;AAC9B;AACD;;AAED,WAAK,IAAIN,IAAT,IAAiBO,eAAjB,EAAkC;;AAEhC,YAAI,CAAC,KAAKb,SAAL,CAAeM,IAAf,CAAL,EAA2B;AACzB;AACD;;AAED,YAAI,KAAKF,IAAL,CAAUU,UAAV,CAAqBR,IAArB,CAAJ,EAAgC;;AAE9B,eAAKJ,MAAL,CAAY,OAAZ,iCAAkDI,IAAlD;AACA,eAAKN,SAAL,CAAeM,IAAf,EAAqBG,OAArB,CAA6BH,IAA7B;;AAEA;AACA,cAAI,CAAC,KAAKN,SAAL,CAAeQ,cAApB,EAAoC;AAClC;AACD;AACF;;AAED,aAAKO,MAAL,CAAYT,IAAZ;AACD;AAEF;;;;;;AAGH;;kBAEeP,e","file":"../../../../../felixhayashi/tiddlymap/js/services/CallbackManager.js","sourcesContent":["// @preserve\n/*\\\n\ntitle: $:/plugins/felixhayashi/tiddlymap/js/CallbackManager\ntype: application/javascript\nmodule-type: library\n\n@preserve\n\n\\*/\n\nimport utils from '$:/plugins/felixhayashi/tiddlymap/js/utils';\n\n/**\n * Makes it possible to register callbacks for tiddler changes.\n */\nclass CallbackManager {\n\n  constructor() {\n    this.callbacks = utils.makeHashMap();\n    this.logger = $tm.logger;\n    this.wiki = $tw.wiki;\n  }\n\n  /**\n   * The callback mechanism allows to dynamically listen to tiddler\n   * changes without hardcoding a change-check for a tiddler name\n   * in the refresh function.\n   *\n   * @param {TiddlerReference} tRef - A tiddler whose change triggers\n   *     the callback.\n   * @param {function} callback - A function that is called when the\n   *     tiddler has changed.\n   * @param {boolean} [isDeleteOnCall=true] - True if to delete the\n   *     callback once it has been called, false otherwise.\n   */\n  add(tRef, callback, isDeleteOnCall = true) {\n\n    this.logger('debug', `A callback was registered for changes of \"${tRef}\"`);\n    this.callbacks[tRef] = {\n      execute: callback,\n      isDeleteOnCall\n    };\n\n  };\n\n  /**\n   * Removes the callback from the list of tiddler callbacks.\n   */\n  remove(refOrRefList) {\n\n    if (!refOrRefList) {\n      return;\n    }\n\n    if (typeof refOrRefList === 'string') {\n      refOrRefList = [ refOrRefList ];\n    }\n\n    for (let i = refOrRefList.length; i--;) {\n      const tRef = refOrRefList[i];\n      if (this.callbacks[tRef]) {\n        this.logger('debug', `Deleting callback for \"${tRef}\"`);\n        delete this.callbacks[tRef];\n      }\n    }\n\n  };\n\n  /**\n   * this method has to be implemented at the top of the refresh method.\n   * It checks for changed tiddlers that have\n   * registered callbacks. If `deleteOnCall` was specified during\n   * registration of the callback, the callback will be deleted\n   * automatically.\n   */\n  refresh(changedTiddlers) {\n\n    if (this.callbacks.length == 0) {\n      return;\n    }\n\n    for (let tRef in changedTiddlers) {\n\n      if (!this.callbacks[tRef]) {\n        continue;\n      }\n\n      if (this.wiki.getTiddler(tRef)) {\n\n        this.logger('debug', `Executing a callback for: ${tRef}`);\n        this.callbacks[tRef].execute(tRef);\n\n        // a continue prevents deleting the callback\n        if (!this.callbacks.isDeleteOnCall) {\n          continue;\n        }\n      }\n\n      this.remove(tRef);\n    }\n\n  };\n}\n\n/*** Exports *******************************************************/\n\nexport default CallbackManager;\n"],"sourceRoot":"../../../../../../src/plugins"}